// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AEROBOT_BACKWARD = "Backward";
Blockly.Msg.AEROBOT_CENTER = "Center";
Blockly.Msg.AEROBOT_DISTSENS_TITLE = "DistSensor";
Blockly.Msg.AEROBOT_DISTSENS_TOOLTIP = "";
Blockly.Msg.AEROBOT_FORWARD = "Forward";
Blockly.Msg.AEROBOT_HELPURL = "http://affordableeducationrobot.github.io/v1.0/";
Blockly.Msg.AEROBOT_LEFT = "Left";
Blockly.Msg.AEROBOT_LIGHTSENS_TITLE = "LightSensor";
Blockly.Msg.AEROBOT_LIGHTSENS_TOOLTIP = "";
Blockly.Msg.AEROBOT_LINESENS_TITLE = "LineSensor";
Blockly.Msg.AEROBOT_LINESENS_TOOLTIP = "";
Blockly.Msg.AEROBOT_MOVE_TITLE = "Move";
Blockly.Msg.AEROBOT_MOVE_TOOLTIP = "";
Blockly.Msg.AEROBOT_NONE = "None";
Blockly.Msg.AEROBOT_RIGHT = "Right";
Blockly.Msg.AEROBOT_ROTATE_LEFT = "Left";
Blockly.Msg.AEROBOT_ROTATE_RIGHT = "Right";
Blockly.Msg.AEROBOT_ROTATE_TITLE = "Rotate";
Blockly.Msg.AEROBOT_ROTATE_TOOLTIP = "";
Blockly.Msg.AEROBOT_SETLED_TITLE = "SetLedColor";
Blockly.Msg.AEROBOT_SETLED_TOOLTIP = "";
Blockly.Msg.AEROBOT_STOP = "Stop";
Blockly.Msg.AEROBOT_TURN_LEFT = "TurnLeft";
Blockly.Msg.AEROBOT_TURN_RIGHT = "TurnRight";
Blockly.Msg.AEROBOT_WARNING = "Need to install AERobot library";
Blockly.Msg.ARDUINO = "Arduino";
Blockly.Msg.ARDUINO_CODE = "Arduino Code　";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD = "array";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this array block.";
Blockly.Msg.ARRAY_CREATE_WITH_HELPURL = "";
Blockly.Msg.ARRAY_CREATE_WITH_INPUT_WITH = "Create array with";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE = "item";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the array.";
Blockly.Msg.ARRAY_CREATE_WITH_TOOLTIP = "Create a array with any number of items.";
Blockly.Msg.ARRAY_GETINDEX_AT = "Get index";
Blockly.Msg.ARRAY_GETINDEX_AT1 = "Get index";
Blockly.Msg.ARRAY_GETINDEX_AT2 = "index";
Blockly.Msg.ARRAY_GETINDEX_HELPURL = "";
Blockly.Msg.ARRAY_GETINDEX_ITEM = "In array";
Blockly.Msg.ARRAY_GETSIZE_ITEM = "Size of the array"
Blockly.Msg.ARRAY_GETINDEX_TOOLTIP = "";
Blockly.Msg.ARRAY_MODIFY_INDICE = "set element nb";
Blockly.Msg.ARRAY_MODIFY_NAME = "in array";
Blockly.Msg.ARRAY_MODIFY_VALUE = "value";
Blockly.Msg.ARRAY_MODIFY_TOOLTIP = "set a specific value to an elemnt of an array";
Blockly.Msg.ARRAY_FOR_INPUT_FROM_TO = "from %1 to size of the %2";
Blockly.Msg.ARRAY_FOR_INPUT_FROM_TO1 = "from ";
Blockly.Msg.ARRAY_FOR_INPUT_FROM_TO2 = " to size of the ";
Blockly.Msg.ARRAY_FOR_INPUT_FROM_TO3 = " length" ;
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.AUTO_SAVE_TITLE = "AutoSave";
Blockly.Msg.BLOCKS = "Blocks";
Blockly.Msg.BLUE = "Blue";
Blockly.Msg.BLYNK_AUTH = "Auth";
Blockly.Msg.BLYNK_CONNECT_TITLE = "Connectted";
Blockly.Msg.BLYNK_CONNECT_TOOLTIP = "Check connection";
Blockly.Msg.BLYNK_EMAIL_TITLE = "Send Email";
Blockly.Msg.BLYNK_EMAIL_TOOLTIP = "";
Blockly.Msg.BLYNK_ETHERNET_BEGIN_TITLE = "Begin";
Blockly.Msg.BLYNK_ETHERNET_BEGIN_TOOLTIP = "";
Blockly.Msg.BLYNK_HELPURL = "https://github.com/blynkkk/blynk-library";
Blockly.Msg.BLYNK_MERGE_PARAM_TITLE = "Get Merge Parameter";
Blockly.Msg.BLYNK_MERGE_PARAM_TOOLTIP = "";
Blockly.Msg.BLYNK_NOTIFY_TITLE = "Push Notify";
Blockly.Msg.BLYNK_NOTIFY_TOOLTIP = "";
Blockly.Msg.BLYNK_PARAM_TITLE = "Get Parameter";
Blockly.Msg.BLYNK_PARAM_TOOLTIP = "";
Blockly.Msg.BLYNK_TWEET_TITLE = "Tweet";
Blockly.Msg.BLYNK_TWEET_TOOPTIP = "";
Blockly.Msg.BLYNK_VIRTUAL_WRITE_TITLE = "Send Virtual Value";
Blockly.Msg.BLYNK_VIRTUAL_WRITE_TOOLTIP = "";
Blockly.Msg.BLYNK_WRITE_TITLE = "Get Virtual Action";
Blockly.Msg.BLYNK_WRITE_TOOLTIP = "";
Blockly.Msg.BUTTON_EXPORT = "Export";
Blockly.Msg.BUTTON_IMPORT = "Import";
Blockly.Msg.BUTTON_NEW = "Create New";
Blockly.Msg.BUTTON_OPEN = "Open";
Blockly.Msg.BUTTON_SAVE = "Save";
Blockly.Msg.CAST_NUMBER_HELPURL = "https://www.arduino.cc/en/Reference/Cast";
Blockly.Msg.CAST_NUMBER_TITLE = "Type cast";
Blockly.Msg.CAST_NUMBER_TOOLTIP = "The cast operator translates one variable type into another and forces calculations to be performed in the cast type.";
Blockly.Msg.CATEGORY_ADAFRUIT = "Adafruit";
Blockly.Msg.CATEGORY_AEROBOT = "AERobot";
Blockly.Msg.CATEGORY_ANALOG = "Analog I/O";
Blockly.Msg.CATEGORY_ARRAY = "Array";
Blockly.Msg.CATEGORY_BYLNK = "Blynk";
Blockly.Msg.CATEGORY_CLOUD_SERVICE = "Cloud Service";
Blockly.Msg.CATEGORY_DIGITAL = "Digital I/O";
Blockly.Msg.CATEGORY_ETHERNET = "Ethernet";
Blockly.Msg.CATEGORY_ETHERNET_CLIENT = "Clinet";
Blockly.Msg.CATEGORY_ETHERNET_INIT = "Init";
Blockly.Msg.CATEGORY_PROCEDURES = "Functions";
Blockly.Msg.CATEGORY_GROVE = "Grove";
Blockly.Msg.CATEGORY_GROVE_ANALOG = "Grove Analog";
Blockly.Msg.CATEGORY_GROVE_INPUT = "Input";
Blockly.Msg.CATEGORY_GROVE_LCD_RGB = "LCD RGB";
Blockly.Msg.CATEGORY_GROVE_MOTOR = "Grove Motor";
Blockly.Msg.CATEGORY_GROVE_OUTPUT = "Output";
Blockly.Msg.CATEGORY_GROVE_ACTUATOR = "Actuators";
Blockly.Msg.CATEGORY_GROVE_DISPLAY = "Display";
Blockly.Msg.CATEGORY_GROVE_SENSOR = "Sensors";
Blockly.Msg.CATEGORY_OTTO = "Otto";
Blockly.Msg.CATEGORY_I2C_MATRIX = "LED Matrix";
Blockly.Msg.CATEGORY_I2C_SEVENSEG = "7 Segment";
Blockly.Msg.CATEGORY_IFTTT = "IFTTT";
Blockly.Msg.CATEGORY_INITIALIZES = "Initializes";
Blockly.Msg.CATEGORY_INOUT = "In/Out";
Blockly.Msg.CATEGORY_INTERRUPTS = "Interrupts";
Blockly.Msg.CATEGORY_EEPROM = "EEPROM";
Blockly.Msg.CATEGORY_INVOLT = "involt";
Blockly.Msg.CATEGORY_IR_REMOTE = "IR Remote";
Blockly.Msg.CATEGORY_LCD = "LCD";
Blockly.Msg.CATEGORY_LOGIC = "Logic";
Blockly.Msg.CATEGORY_LOOPS = "Loops";
Blockly.Msg.CATEGORY_M2X = "M2X";
Blockly.Msg.CATEGORY_MATH = "Math";
Blockly.Msg.CATEGORY_MPR121 = "Capacitive Sensor";
Blockly.Msg.CATEGORY_NEOPIXEL = "NeoPixel";
Blockly.Msg.CATEGORY_OTHERS = "Tone";
Blockly.Msg.CATEGORY_OTHER_SENSOR = "Other Sensor";
Blockly.Msg.CATEGORY_RGBLED = "RGBLed(ws8211)";
Blockly.Msg.CATEGORY_ROBOT = "Robot";
Blockly.Msg.CATEGORY_SERIAL = "Serial I/O";
Blockly.Msg.CATEGORY_SERVO = "Servo";
Blockly.Msg.CATEGORY_SHIELD_BOT = "ShieldBot";
Blockly.Msg.CATEGORY_SPARKFUN = "SparkFun";
Blockly.Msg.CATEGORY_TEXT = "Text";
Blockly.Msg.CATEGORY_TIME = "Time";
Blockly.Msg.CATEGORY_ULTRA_SONIC = "UltraSonic";
Blockly.Msg.CATEGORY_VARIABLES = "Variables";
Blockly.Msg.CHANGE = "Change";
Blockly.Msg.CHANGE_LANG = "Change Language";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.COL = "Col";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOR = "Color";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "in list";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "for each item";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP1 = "For each item in a list, set the variable '";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP2 = "' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO = "from %1 to %2";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO1 = "from ";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO2 = " to ";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "from %1 to %2 by %3";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY1 = "from ";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY2 = " to ";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY3 = " by ";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "count with";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable %1 take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_FOR_TOOLTIP1 = "Have the variable ";
Blockly.Msg.CONTROLS_FOR_TOOLTIP2 = " take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TITLE1 = "repeat ";
Blockly.Msg.CONTROLS_REPEAT_TITLE2 = " times";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repeat";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_RETURN_HELPURL = "https://www.arduino.cc/en/Reference/Return";
Blockly.Msg.CONTROLS_RETURN_TITLE = "Return";
Blockly.Msg.CONTROLS_RETURN_TOOLTIP = "Terminate a function and return a value from a function to the calling function, if desired.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.CONTROLS_WHILE_HELPURL = "https://www.arduino.cc/en/Reference/While";
Blockly.Msg.CONTROLS_WHILE_INPUT_DO = "do";
Blockly.Msg.CONTROLS_WHILE_TITLE = "while";
Blockly.Msg.CONTROLS_WHILE_TOOLTIP = "while loops will loop continuously, and infinitely, until the expression inside the parenthesis, () becomes false.";
Blockly.Msg.COPY_BUTTON = "Clip Code";
Blockly.Msg.COPY_DONE = "Copy Done!";
Blockly.Msg.DATA_LENGTH = "Data Length";
Blockly.Msg.DATA_TYPE = "DataType";
Blockly.Msg.DELETE_ALL1 = "Delete all ";
Blockly.Msg.DELETE_ALL2 = " blockls?";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DELETE_X_BLOCKS1 = "Delete ";
Blockly.Msg.DELETE_X_BLOCKS2 = " Blocks";
Blockly.Msg.DEVICE_ID = "DeviceID";
Blockly.Msg.SETTINGS_OK = "Save and Restart";
Blockly.Msg.SETTINGS_CANCEL = "Cancel";
Blockly.Msg.SETTINGS_VERSION = "Version: ";
Blockly.Msg.SETTINGS_VERSION_PRE_RELEASE = " (Pre-Release)";
Blockly.Msg.MESSAGE_UPDATE = "New version ";
Blockly.Msg.MESSAGE_UPDATE_APPEND = " is now available!";
Blockly.Msg.DIALOG1_NO = "No";
Blockly.Msg.DIALOG1_TITLE = "Reset OK?";
Blockly.Msg.DIALOG1_YES = "Yes";
Blockly.Msg.DIALOG2_TITLE = "Filename";
Blockly.Msg.DIALOG3_TITLE = "can't read xml file";
Blockly.Msg.DIALOG4_TITLE = "Delete All Blocks?";
Blockly.Msg.DIALOG_BLOCK_TITLE = "Option Blocks";
Blockly.Msg.DIALOG_EXPORT_OK = "Close";
Blockly.Msg.DIALOG_IMPORT_CANCEL = "Cancel";
Blockly.Msg.DIALOG_IMPORT_OK = "Import";
Blockly.Msg.DIALOG_LANG_TITLE = "Select Language";
Blockly.Msg.DIALOG_SENDCHROME = "Send Sample Code for ChromeApp?";
Blockly.Msg.DIRECTION = "Direction";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DISCARD = "discard";
Blockly.Msg.DO = "do";
Blockly.Msg.DOUBLE = "Double";
Blockly.Msg.DOWNLOAD_CHROME_APP = "Download Offline Editor";
Blockly.Msg.DROPDOWN_DISCARD = "Block discard";
Blockly.Msg.DROPDOWN_SAVE_AS = "Save as...";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ELEVATION = "Elevation";
Blockly.Msg.EMAIL_ADDRESS = "Address";
Blockly.Msg.EMAIL_BODY = "Body";
Blockly.Msg.EMAIL_TITLE = "Title";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.ERROR_BETA_WARNING = 'YOUR ARE USING A PRE-RELEASE VERSION! PLEASE USE A STABLE RELEASE INSTEAD!';
Blockly.Msg.ERROR_FILENAME = "Please Entry Filename!";
Blockly.Msg.ERROR_FILENAME2 = "Filename ErrorFilename Error！";
Blockly.Msg.ERROR_PARSING_XML = "Error parsing XML";
Blockly.Msg.ETHERNET_AVAILABLE_HELPURL = "https://www.arduino.cc/en/Reference/ClientAvailable";
Blockly.Msg.ETHERNET_AVAILABLE_TITLE = "Clinet.availalbe";
Blockly.Msg.ETHERNET_AVAILABLE_TOOLTIP = "Returns the number of bytes available for reading (that is, the amount of data that has been written to the client by the server it is connected to).";
Blockly.Msg.ETHERNET_BEGIN_DHCP_TITLE = "Begin (DHCP)";
Blockly.Msg.ETHERNET_BEGIN_DHCP_TOOLTIP = "Using Ethernet.begin(mac) with the proper network setup, the Ethernet shield will automatically obtain an IP address.";
Blockly.Msg.ETHERNET_BEGIN_HELPURL = "https://www.arduino.cc/en/Reference/EthernetBegin";
Blockly.Msg.ETHERNET_BEGIN_TITLE = "Begin";
Blockly.Msg.ETHERNET_BEGIN_TOOLTIP = "Initializes the ethernet library and network settings.";
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrintln";
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TITLE = "Client.Println";
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TOOLTIP = "Print data, followed by a carriage return and newline, to the server a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";
Blockly.Msg.ETHERNET_CLIENT_PRINT_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrint";
Blockly.Msg.ETHERNET_CLIENT_PRINT_TITLE = "Client.Print";
Blockly.Msg.ETHERNET_CLIENT_PRINT_TOOLTIP = "Print data to the server that a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";
Blockly.Msg.ETHERNET_CONNECTED_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnected";
Blockly.Msg.ETHERNET_CONNECTED_TITLE = "Clinet.Connected";
Blockly.Msg.ETHERNET_CONNECTED_TOOLTIP = "Returns true if the client is connected, false if not.";
Blockly.Msg.ETHERNET_CONNECT_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnect";
Blockly.Msg.ETHERNET_CONNECT_TITLE = "Clinet.Connect";
Blockly.Msg.ETHERNET_CONNECT_TOOLTIP = "Connects to a specified IP address and port. The return value indicates success or failure. Also supports DNS lookups when using a domain name.";
Blockly.Msg.ETHERNET_GET_REQUEST_HELPURL = "";
Blockly.Msg.ETHERNET_GET_REQUEST_TITLE = "GET Request";
Blockly.Msg.ETHERNET_GET_REQUEST_TOOLTIP = "Create GET Request.";
Blockly.Msg.ETHERNET_LOCALIP_HELPURL = "https://www.arduino.cc/en/Reference/EthernetLocalIP";
Blockly.Msg.ETHERNET_LOCALIP_TITLE = "localIP";
Blockly.Msg.ETHERNET_LOCALIP_TOOLTIP = "Retruns the IP address of the Ethernet shield";
Blockly.Msg.ETHERNET_MAC_ADDRESS_TOOLTIP = "Edit Mac Address";
Blockly.Msg.ETHERNET_POST_DATA = "Data";
Blockly.Msg.ETHERNET_POST_REQUEST_HELPURL = "";
Blockly.Msg.ETHERNET_POST_REQUEST_TITLE = "POST Request";
Blockly.Msg.ETHERNET_POST_REQUEST_TOOLTIP = "Create POST Request.";
Blockly.Msg.ETHERNET_READ_HELPURL = "https://www.arduino.cc/en/Reference/ClientRead";
Blockly.Msg.ETHERNET_READ_TITLE = "Client.Read";
Blockly.Msg.ETHERNET_READ_TOOLTIP = "Read the next byte received from the server the client is connected to (after the last call to read()).";
Blockly.Msg.ETHERNET_STOP_HELPURL = "https://www.arduino.cc/en/Reference/ClientStop";
Blockly.Msg.ETHERNET_STOP_TITLE = "Client.Stop";
Blockly.Msg.ETHERNET_STOP_TOOLTIP = "Disconnect from the server.";
Blockly.Msg.ETHERNET_VERSION_1 = "Eternet";
Blockly.Msg.ETHERNET_VERSION_2 = "Eternet2";
Blockly.Msg.ETHERNET_VERSION_V2 = "Eternet_v2";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.FALLING = "Falling";
Blockly.Msg.GO_TO_SAMPLE = "Link to Sample Code Page";
Blockly.Msg.GO_TO_WEB = "Link to Online Editor";
Blockly.Msg.GREEN = "Green";
Blockly.Msg.GROVE_BUTTON_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Button";
Blockly.Msg.GROVE_BUTTON_TITLE = "Button";
Blockly.Msg.GROVE_BUTTON_TOOLTIP = "Basic digital input";
Blockly.Msg.GROVE_BUZZER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Buzzer";
Blockly.Msg.GROVE_BUZZER_TITLE = "Piezo Buzzer";
Blockly.Msg.GROVE_BUZZER_TOOLTIP = "Emit a tone when the output is high";
Blockly.Msg.GROVE_IR_EMITTER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter";
Blockly.Msg.GROVE_IR_EMITTER_SEND_TITLE = "Send";
Blockly.Msg.GROVE_IR_EMITTER_SEND_TOOLTIP = "Send Data.";
Blockly.Msg.GROVE_IR_EMITTER_TITLE = "Infrared Emitter";
Blockly.Msg.GROVE_IR_EMITTER_WARNING = "Need to install the (Grove) IRSendRev Library.";
Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TITLE = "Check Data";
Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TOOLTIP = "";
Blockly.Msg.GROVE_IR_RECEIVER_DATA_TITLE = "Received Data";
Blockly.Msg.GROVE_IR_RECEIVER_DATA_TOOLTIP = "";
Blockly.Msg.GROVE_IR_RECEIVER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Receiver";
Blockly.Msg.GROVE_IR_RECEIVER_INIT_TITLE = "Begin";
Blockly.Msg.GROVE_IR_RECEIVER_INIT_TOOLTIP = "Begin";
Blockly.Msg.GROVE_IR_RECEIVER_INIT_WARNING = "Need to install the (Grove) IRSendRev Library.";
Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TITLE = "Receive";
Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TOOLTIP = "";
Blockly.Msg.GROVE_IR_RECEIVER_TITLE = "Infrared Receiver";
Blockly.Msg.GROVE_IR_RECEIVER_WARNING = "Need to Begin block.";
Blockly.Msg.GROVE_LED_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LED";
Blockly.Msg.GROVE_LED_TITLE = "LED";
Blockly.Msg.GROVE_LED_TOOLTIP = "LED";
Blockly.Msg.GROVE_LIGHT_SENSOR_HELPURL = "http://wiki.seeed.cc/Grove_Starter_Kit_v3/#Grove_-_Light_Sensor";
Blockly.Msg.GROVE_LIGHT_SENSOR_TITLE = "Light Sensor";
Blockly.Msg.GROVE_LIGHT_SENSOR_TOOLTIP = "Output Low Value in bright light. High Value is darkness.";
Blockly.Msg.GROVE_PIN = "Pin";
Blockly.Msg.GROVE_RELAY_HELPURL = "http://wiki.seeed.cc/Grove_Starter_Kit_v3/#Grove_.E2.80.93_Relay";
Blockly.Msg.GROVE_RELAY_TITLE = "Relay";
Blockly.Msg.GROVE_RELAY_TOOLTIP = "Capable of switching a much higher voltages and currents. The maximum voltage and current that can be controlled by this module upto 250V at 5 amps.";
Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TITLE = "AutoScroll";
Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";
Blockly.Msg.GROVE_RGB_LCD_BEGIN_TITLE = "Begin";
Blockly.Msg.GROVE_RGB_LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display.";
Blockly.Msg.GROVE_RGB_LCD_BEGIN_WARNING = "Need to install the Grove_LCD_RGB_Backlight library.";
Blockly.Msg.GROVE_RGB_LCD_CLEAR_TITLE = "Clear";
Blockly.Msg.GROVE_RGB_LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";
Blockly.Msg.GROVE_RGB_LCD_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LCD_RGB_Backlight";
Blockly.Msg.GROVE_RGB_LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";
Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TITLE = "LeftToRight";
Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right, the default.";
Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";
Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";
Blockly.Msg.GROVE_RGB_LCD_PRINT_TITLE = "Print";
Blockly.Msg.GROVE_RGB_LCD_PRINT_TOOLTIP = "Prints text to the LCD.";
Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TITLE = "RightToLeft";
Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";
Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";
Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TITLE = "setCursor";
Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TOOLTIP = "Position the LCD cursor.";
Blockly.Msg.GROVE_RGB_LCD_TITLE = "LCD RGB";
Blockly.Msg.GROVE_RGB_LCD_WARNING = "Need to Begin block.";
Blockly.Msg.GROVE_ROTARY_ANGLE_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Rotary_Angle_Sensor";
Blockly.Msg.GROVE_ROTARY_ANGLE_TITLE = "Rotary Angle";
Blockly.Msg.GROVE_ROTARY_ANGLE_TOOLTIP = "Analog output between 0 and Vcc";
Blockly.Msg.GROVE_SOUND_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Sound_Sensor";
Blockly.Msg.GROVE_SOUND_SENSOR_TITLE = "Sound Sensor";
Blockly.Msg.GROVE_SOUND_SENSOR_TOOLTIP = "Detect the sound strength of the environment";
Blockly.Msg.GROVE_STAT = "State";
Blockly.Msg.GROVE_TEMP_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Temperature_Sensor";
Blockly.Msg.GROVE_TEMP_SENSOR_TITLE = "Temporature Sensor";
Blockly.Msg.GROVE_TEMP_SENSOR_TOOLTIP = "return number of ambient temperature in ℃";
Blockly.Msg.GROVE_TILT_SWITCH_TITLE = "Tilt Switch";
Blockly.Msg.GROVE_TILT_SWITCH_TOOLTIP = "When the switch is level it is open, and when tilted, the switch closes.";
Blockly.Msg.GROVE_TOUCH_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Touch_Sensor";
Blockly.Msg.GROVE_TOUCH_TITLE = "Touch";
Blockly.Msg.GROVE_TOUCH_TOOLTIP = "Basic digital input";
Blockly.Msg.GROVE_PORT = "Grove Port";
Blockly.Msg.GROVE_ULTRASONIC_RANGER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Ultrasonic_Ranger";
Blockly.Msg.GROVE_ULTRASONIC_RANGER_TITLE = "Ultrasonic Ranger";
Blockly.Msg.GROVE_ULTRASONIC_RANGER_UNIT = "Unit";
Blockly.Msg.GROVE_ULTRASONIC_RANGER_UNIT_CM = "cm";
Blockly.Msg.GROVE_ULTRASONIC_RANGER_UNIT_INCH = "inch";
Blockly.Msg.GROVE_ULTRASONIC_RANGER_TOOLTIP = "Non-contact distance measurement module.";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_HELPURL = "http://wiki.seeed.cc/Grove-TemperatureAndHumidity_Sensor/";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_TITLE = "Temperature & Humidity Sensor";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_VALUE = "Value";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_VALUE_HUMI = "Humidity (%)";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_VALUE_TEMP_C = "Temperature (°C)";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_VALUE_TEMP_F = "Temperature (°F)";
Blockly.Msg.GROVE_TEMP_HUMI_SENSOR_TOOLTIP = "Relative Humidity and temperature measurement.";
Blockly.Msg.GROVE_LED_BAR_HELPURL = "http://wiki.seeed.cc/Grove-LED_Bar/";
Blockly.Msg.GROVE_LED_BAR_TITLE = "LED Bar";
Blockly.Msg.GROVE_LED_BAR_LEVEL = "Level (0 - 10)";
Blockly.Msg.GROVE_LED_BAR_TOOLTIP = "LED Bar is comprised of a 10 segment LED gauge bar and an MY9221 LED controlling chip.";
Blockly.Msg.GROVE_OLED_DISPLAY_HELPURL = "http://wiki.seeed.cc/Grove-OLED_Display_0.96inch/";
Blockly.Msg.GROVE_OLED_DISPLAY_TITLE = "OLED Display";
Blockly.Msg.GROVE_OLED_DISPLAY_CLEAR = "clearDisplay()";
Blockly.Msg.GROVE_OLED_DISPLAY_SET_CURSOR = "setTextXY(";
Blockly.Msg.GROVE_OLED_DISPLAY_SET_CURSOR_SEP = ",";
Blockly.Msg.GROVE_OLED_DISPLAY_SET_CURSOR_APPEND = ")";
Blockly.Msg.GROVE_OLED_DISPLAY_PUT = "Put";
Blockly.Msg.GROVE_OLED_DISPLAY_RESOLUTION = "Resolution";
Blockly.Msg.GROVE_OLED_DISPLAY_TOOLTIP = "An OLED monochrome 128×64dot matrix display module with Grove 4pin I2C Interface.";
Blockly.Msg.OTTO = "Otto";
Blockly.Msg.OTTO_HELPURL = "http://otto.strikingly.com/";
Blockly.Msg.OTTO_INIT_TITLE = "Otto Init Legs";
Blockly.Msg.OTTO_LEFT_LEG = "Left Leg";
Blockly.Msg.OTTO_RIGHT_LEG = "Right Leg";
Blockly.Msg.OTTO_LEFT_FOOT = "Left Foot";
Blockly.Msg.OTTO_RIGHT_FOOT = "Right Foot";
Blockly.Msg.OTTO_INIT_TOOLTIP = "initLegs()";
Blockly.Msg.OTTO_CALIBRATE_TITLE = "Otto Calibrate Trims";
Blockly.Msg.OTTO_CALIBRATE_TOOLTIP = "setTrims()";
Blockly.Msg.OTTO_HOME_TITLE = "Otto Home Position";
Blockly.Msg.OTTO_HOME_TOOLTIP = "home()";
Blockly.Msg.OTTO_WALK_TITLE = "Otto Walk";
Blockly.Msg.OTTO_DIRECTION_FORWARD = "Forward";
Blockly.Msg.OTTO_DIRECTION_BACKWARD = "Backward";
Blockly.Msg.OTTO_DISTANCE_UNIT = "Steps";
Blockly.Msg.OTTO_DURATION_UNIT = "ms";
Blockly.Msg.OTTO_WALK_TOOLTIP = "walk()";
Blockly.Msg.OTTO_TURN_TITLE = "Otto Turn";
Blockly.Msg.OTTO_DIRECTION_LEFT = "Left";
Blockly.Msg.OTTO_DIRECTION_RIGHT = "Right";
Blockly.Msg.OTTO_TURN_TOOLTIP = "turn()";
Blockly.Msg.OTTO_BEND_TITLE = "Otto Bend";
Blockly.Msg.OTTO_BEND_TOOLTIP = "bend()";
Blockly.Msg.OTTO_SHAKE_LEG_TITLE = "Otto Shake Leg";
Blockly.Msg.OTTO_SHAKE_LEG_TOOLTIP = "shakeLeg()";
Blockly.Msg.OTTO_FREESTYLE_TITLE = "Otto Freestyle";
Blockly.Msg.OTTO_STYLE_UP_DOWN = "Up-Down";
Blockly.Msg.OTTO_STYLE_ASC_TURN = "Ascending Turn";
Blockly.Msg.OTTO_STYLE_SWING = "Swing";
Blockly.Msg.OTTO_STYLE_TIP_TOE_SWING = "Tip-Toe Swing";
Blockly.Msg.OTTO_STYLE_JITTER = "Jitter";
Blockly.Msg.OTTO_HEIGHT_UNIT = "Height (5 - 30)";
Blockly.Msg.OTTO_FREESTYLE_TOOLTIP = "updown(), ascendingTurn(), swing(), tiptoeSwing(), jitter()";
Blockly.Msg.OTTO_MOONWALK_TITLE = "Otto Moonwalk";
Blockly.Msg.OTTO_MOONWALK_TOOLTIP = "moonwalker()";
Blockly.Msg.OTTO_CRUSAITO_TITLE = "Otto Crusaito";
Blockly.Msg.OTTO_CRUSAITO_TOOLTIP = "crusaito()";
Blockly.Msg.OTTO_FLAPPING_TITLE = "Otto Flapping";
Blockly.Msg.OTTO_FLAPPING_TOOLTIP = "flapping()";
Blockly.Msg.OTTO_HEIGHT_TITLE = "Height Unit";
Blockly.Msg.OTTO_HEIGHT_TOOLTIP = "Small: 5, Medium: 10, Big: 15";
Blockly.Msg.OTTO_HEIGHT_SMALL = "Small";
Blockly.Msg.OTTO_DIRECTION_MEDIUM = "Meidum";
Blockly.Msg.OTTO_DIRECTION_BIG = "Big";
Blockly.Msg.OTTO_ULTRASONIC_INIT_TITLE = "Otto Init Ultrasonic Sensor";
Blockly.Msg.OTTO_TRIGGER_PIN = "Trigger Pin";
Blockly.Msg.OTTO_ECHO_PIN = "Echo Pin";
Blockly.Msg.OTTO_ULTRASONIC_INIT_TOOLTIP = "initUltrasonic()";
Blockly.Msg.OTTO_ULTRASONIC_DISTANCE_TITLE = "Otto Sensing Distance";
Blockly.Msg.OTTO_ULTRASONIC_DISTANCE_TOOLTIP = "getDistance()";
Blockly.Msg.OTTO_BUZZER_INIT_TITLE = "Otto Init Buzzer";
Blockly.Msg.OTTO_BUZZER_PIN = "Pin";
Blockly.Msg.OTTO_BUZZER_INIT_TOOLTIP = "initBuzzer()";
Blockly.Msg.OTTO_BUZZER_SING_TITLE = "Otto Sing";
Blockly.Msg.OTTO_BUZZER_INIT_TOOLTIP = "sing()";
Blockly.Msg.OTTO_BUZZER_SING_CONNECTION = "Connection";
Blockly.Msg.OTTO_BUZZER_SING_DISCONNECTION = "Disconnection";
Blockly.Msg.OTTO_BUZZER_SING_BUTTON_PUSHED = "Button Pushed";
Blockly.Msg.OTTO_BUZZER_SING_MODEL_1 = "Model 1";
Blockly.Msg.OTTO_BUZZER_SING_MODEL_2 = "Model 2";
Blockly.Msg.OTTO_BUZZER_SING_MODEL_3 = "Model 3";
Blockly.Msg.OTTO_BUZZER_SING_SUPRISE = "Suprise";
Blockly.Msg.OTTO_BUZZER_SING_OH_OH_1 = "Oh-Oh 1";
Blockly.Msg.OTTO_BUZZER_SING_OH_OH_2 = "Oh-Oh 2";
Blockly.Msg.OTTO_BUZZER_SING_CUDDLY = "Cuddly";
Blockly.Msg.OTTO_BUZZER_SING_SLEEPING = "Sleeping";
Blockly.Msg.OTTO_BUZZER_SING_HAPPY = "Happy";
Blockly.Msg.OTTO_BUZZER_SING_SUPER_HAPPY = "Super Happy";
Blockly.Msg.OTTO_BUZZER_SING_HAPPY_SHORT = "Happy (Short)";
Blockly.Msg.OTTO_BUZZER_SING_SAD = "Sad";
Blockly.Msg.OTTO_BUZZER_SING_CONFUSED = "Confused";
Blockly.Msg.OTTO_BUZZER_SING_FART_1 = "Fart 1";
Blockly.Msg.OTTO_BUZZER_SING_FART_2 = "Fart 2";
Blockly.Msg.OTTO_BUZZER_SING_FART_3 = "Fart 3";
Blockly.Msg.OTTO_MOUTH_TITLE = "Otto Put Mouth";
Blockly.Msg.OTTO_MOUTH_INIT_TOOLTIP = "putMouth()";
Blockly.Msg.OTTO_MOUTH_ZERO = "Zero";
Blockly.Msg.OTTO_MOUTH_ONE = "One";
Blockly.Msg.OTTO_MOUTH_TWO = "Two";
Blockly.Msg.OTTO_MOUTH_THREE = "Three";
Blockly.Msg.OTTO_MOUTH_FOUR = "Four";
Blockly.Msg.OTTO_MOUTH_FIVE = "Five";
Blockly.Msg.OTTO_MOUTH_SIX = "Six";
Blockly.Msg.OTTO_MOUTH_SEVEN = "Seven";
Blockly.Msg.OTTO_MOUTH_EIGHT = "Eight";
Blockly.Msg.OTTO_MOUTH_NINE = "Nine";
Blockly.Msg.OTTO_MOUTH_SMILE = "Smile";
Blockly.Msg.OTTO_MOUTH_HAPPY_OPEN = "Happy (Open)";
Blockly.Msg.OTTO_MOUTH_HAPPY_CLOSED = "Happy (Closed)";
Blockly.Msg.OTTO_MOUTH_HEART = "Heart";
Blockly.Msg.OTTO_MOUTH_BIG_SUPRISE = "Surprise (Big)";
Blockly.Msg.OTTO_MOUTH_SMALL_SUPRISE = "Surprise (Small)";
Blockly.Msg.OTTO_MOUTH_TONGUE_OUT = "Tongue Out";
Blockly.Msg.OTTO_MOUTH_VAMP_1 = "Vamp 1";
Blockly.Msg.OTTO_MOUTH_VAMP_2 = "Vamp 2";
Blockly.Msg.OTTO_MOUTH_LINE_MOUTH = "Line";
Blockly.Msg.OTTO_MOUTH_CONFUSED = "Confused";
Blockly.Msg.OTTO_MOUTH_DIAGONAL = "Diagonal";
Blockly.Msg.OTTO_MOUTH_SAD = "Sad";
Blockly.Msg.OTTO_MOUTH_SAD_OPEN = "Sad (Open)";
Blockly.Msg.OTTO_MOUTH_SAD_CLOSED = "Sad (Closed)";
Blockly.Msg.OTTO_MOUTH_OK_MOUTH = "OK";
Blockly.Msg.OTTO_MOUTH_X_MOUTH = "X";
Blockly.Msg.OTTO_MOUTH_INTERROGATION = "Interrogation";
Blockly.Msg.OTTO_MOUTH_THUNDER = "Thunder";
Blockly.Msg.OTTO_MOUTH_CULITO = "Culito";
Blockly.Msg.OTTO_MOUTH_ANGRY = "Angry";
Blockly.Msg.OTTO_LED_MATRIX_INIT_TITLE = "Otto Init LED Matrix";
Blockly.Msg.OTTO_LED_MATRIX_INIT_TOOLTIP = "initLEDMatrix()";
Blockly.Msg.OTTO_LED_MATRIX_DIN = "DIN";
Blockly.Msg.OTTO_LED_MATRIX_CS = "CS Pin";
Blockly.Msg.OTTO_LED_MATRIX_CLK = "CLK Pin";
Blockly.Msg.OTTO_LED_MATRIX_DIR = "Rotation";
Blockly.Msg.OTTO_MATRIX_DIR_0 = "0°";
Blockly.Msg.OTTO_MATRIX_DIR_90 = "90°";
Blockly.Msg.OTTO_MATRIX_DIR_180 = "180°";
Blockly.Msg.OTTO_MATRIX_DIR_270 = "270°";
Blockly.Msg.HELP = "Help";
Blockly.Msg.I2C_MATRIX_ADDRESS = "Address";
Blockly.Msg.I2C_MATRIX_BEGIN_TITLE = "Begin";
Blockly.Msg.I2C_MATRIX_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library.";
Blockly.Msg.I2C_MATRIX_CLEAR = "Clear";
Blockly.Msg.I2C_MATRIX_DIAMETER = "Diamater";
Blockly.Msg.I2C_MATRIX_DOTS = "Dots";
Blockly.Msg.I2C_MATRIX_DRAWCIRCLE = "DrawCircle";
Blockly.Msg.I2C_MATRIX_DRAWCOLON = "drawColon";
Blockly.Msg.I2C_MATRIX_DRAWLINE = "DrawLine";
Blockly.Msg.I2C_MATRIX_DRAWPIXEL = "DrawPixel";
Blockly.Msg.I2C_MATRIX_DRAWRECT = "DrawRect";
Blockly.Msg.I2C_MATRIX_FILLRECT = "FillRect";
Blockly.Msg.I2C_MATRIX_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";
Blockly.Msg.I2C_MATRIX_LED_OFF = "Led off";
Blockly.Msg.I2C_MATRIX_LED_ON = "Led on";
Blockly.Msg.I2C_MATRIX_NUM = "Num";
Blockly.Msg.I2C_MATRIX_POSITION = "Position";
Blockly.Msg.I2C_MATRIX_PRINT = "Print";
Blockly.Msg.I2C_MATRIX_SETCURSOR = "Cursor";
Blockly.Msg.I2C_MATRIX_SETROTATION = "Rotation";
Blockly.Msg.I2C_MATRIX_SETTEXTCOLOR = "TextColor";
Blockly.Msg.I2C_MATRIX_SETTEXTSIZE = "TextSize";
Blockly.Msg.I2C_MATRIX_SETTEXTWRAP = "TextWrap";
Blockly.Msg.I2C_MATRIX_TEXT = "text";
Blockly.Msg.I2C_MATRIX_TITLE = "LED Matrix";
Blockly.Msg.I2C_MATRIX_TYPE = "Type";
Blockly.Msg.I2C_MATRIX_WARNING = "Need to Begin block.";
Blockly.Msg.I2C_MATRIX_WRITEDIGITNUM = "writeDigitNum";
Blockly.Msg.I2C_MATRIX_WRITEDISPLAY = "WriteDisplay";
Blockly.Msg.I2C_MATRIX_X = "x";
Blockly.Msg.I2C_MATRIX_X0 = "x0";
Blockly.Msg.I2C_MATRIX_X1 = "x1";
Blockly.Msg.I2C_MATRIX_Y = "y";
Blockly.Msg.I2C_MATRIX_Y0 = "y0";
Blockly.Msg.I2C_MATRIX_Y1 = "y1";
Blockly.Msg.I2C_SEVENSEG_ADDRESS = "Address";
Blockly.Msg.I2C_SEVENSEG_BEGIN_TITLE = "Begin";
Blockly.Msg.I2C_SEVENSEG_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library";
Blockly.Msg.I2C_SEVENSEG_BOOLEAN_FALSE = "hidden";
Blockly.Msg.I2C_SEVENSEG_BOOLEAN_TRUE = "display";
Blockly.Msg.I2C_SEVENSEG_COLON = "Colon";
Blockly.Msg.I2C_SEVENSEG_DOTS = "Colon";
Blockly.Msg.I2C_SEVENSEG_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";
Blockly.Msg.I2C_SEVENSEG_NUM = "Number";
Blockly.Msg.I2C_SEVENSEG_POSITION = "Position";
Blockly.Msg.I2C_SEVENSEG_PRINT = "Print";
Blockly.Msg.I2C_SEVENSEG_TITLE = "7 Segment";
Blockly.Msg.I2C_SEVENSEG_WARNING = "Need to Begin blocks";
Blockly.Msg.I2C_SEVENSEG_WRITEDIGITNUM = "WriteDigitNum";
Blockly.Msg.I2C_SEVENSEG_WRITEDISPLAY = "WriteDisplay";
Blockly.Msg.IFTTT_EVENT = "Event";
Blockly.Msg.IFTTT_GET_URL_HELPURL = "https://ifttt.com/maker_webhooks";
Blockly.Msg.IFTTT_GET_URL_TITLE = "Trigger IFTTT webhook";
Blockly.Msg.IFTTT_GET_URL_TOOLTIP = "Trigger IFTTT Webhook event.";
Blockly.Msg.IFTTT_KEY = "Key";
Blockly.Msg.IFTTT_VALUE1 = "Value1";
Blockly.Msg.IFTTT_VALUE2 = "Value2";
Blockly.Msg.IFTTT_VALUE3 = "Value3";
Blockly.Msg.INDEX = "Index";
Blockly.Msg.INFO_FILENAME = "Filename: ";
Blockly.Msg.INFO_TITLE = "[no document loaded]";
Blockly.Msg.INITIALIZES_SETUP_APPENDTEXT = "setup";
Blockly.Msg.INITIALIZES_LOOP_APPENDTEXT = "loop";
Blockly.Msg.INITIALIZES_SETUP_HELPURL = "http://www.arduino.cc/en/Reference/Setup";
Blockly.Msg.INITIALIZES_SETUP_TOOLTIP = "The setup() function is called when a sketch starts. ";
Blockly.Msg.INITIALIZES_LOOP_HELPURL = "http://www.arduino.cc/en/Reference/Loop";
Blockly.Msg.INITIALIZES_LOOP_TOOLTIP = "After creating a setup() function, the loop() function loops consecutively, allowing your program to change and respond.";
Blockly.Msg.INITIALIZES_TEMP_APPENDTEXT = "Temp";
Blockly.Msg.INITIALIZES_TEMP_HELPURL = "";
Blockly.Msg.INITIALIZES_SETUP_TOOLTIP = "Blocks within this scope will not be generate.";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.INOUT_ANALOGPIN_TEXT = "Analog Pin";
Blockly.Msg.INOUT_ANALOG_READ_APPENDTEXT = "analogRead pin";
Blockly.Msg.INOUT_ANALOG_READ_HELPURL = "http://arduino.cc/en/Reference/AnalogRead";
Blockly.Msg.INOUT_ANALOG_READ_TOOLTIP = "Return value between 0 and 1024.";
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_PIN = "analogWrite pin";
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_VALUE = "value (0 - 255)";
Blockly.Msg.INOUT_ANALOG_WRITE_HELPURL = "http://arduino.cc/en/Reference/AnalogWrite";
Blockly.Msg.INOUT_ANALOG_WRITE_TOOLTIP = "Write analog value between 0 and 255 to a specific Port.";
Blockly.Msg.INOUT_DIGITALPIN_TEXT = "Digital Pin";
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PIN = "digitalRead pin";
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PULLUP = "pullup";
Blockly.Msg.INOUT_DIGITAL_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";
Blockly.Msg.INOUT_DIGITAL_READ_TOOLTIP = "";
Blockly.Msg.INOUT_DIGITAL_READ_PULLUP_APPENDTEXT_PIN = "digitalRead (default pullup) pin"
Blockly.Msg.INOUT_ENABLE_INTERNAL_PULLUP_PIN = "Internal pullup on pin";
Blockly.Msg.INOUT_ENABLE_INTERNAL_PULLUP_TOOLTIP = "Enable internal pullup resistor of about 50KOhm.";
Blockly.Msg.INOUT_ENABLE_INTERNAL_PULLUP_HELPURL = "https://www.arduino.cc/en/Reference/PinMode";
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_PIN = "digitalWrite pin";
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_STAT = "stat";
Blockly.Msg.INOUT_DIGITAL_WRITE_HELPURL = "http://arduino.cc/en/Reference/DigitalWrite";
Blockly.Msg.INOUT_DIGITAL_WRITE_TOOLTIP = "Write digital value to a specific Port.";
Blockly.Msg.INOUT_LED_BUINTIN = "Built-In LED Stat";
Blockly.Msg.INOUT_LED_BUINTIN_TOOLTIP = "light or off the build-in LED";
Blockly.Msg.INOUT_LED_BUINTIN_READ = "Read Built-In LED Stat";
Blockly.Msg.INOUT_LED_BUINTIN_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";
Blockly.Msg.INOUT_LED_BUINTIN_READ_TOOLTIP = "";
Blockly.Msg.INOUT_HIGH = "HIGH";
Blockly.Msg.INOUT_LOW = "LOW";
Blockly.Msg.INOUT_OFF = "OFF";
Blockly.Msg.INOUT_ON = "ON";
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_PIN = "Pulsein Pin";
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TIMEOUT = "Timeout";
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TYPE = "Type";
Blockly.Msg.INOUT_PULSEIN_HELPURL = "http://arduino.cc/en/Reference/pulseIn";
Blockly.Msg.INOUT_PULSEIN_TOOLTIP = "Reads a pulse (either HIGH or LOW) on a pin.";
Blockly.Msg.INOUT_TONE_APPENDTEXT_DURATION = "duration (ms)";
Blockly.Msg.INOUT_TONE_APPENDTEXT_FREQ = "frequency";
Blockly.Msg.INOUT_TONE_APPENDTEXT_PIN = "Tone pin";
Blockly.Msg.INOUT_NO_TONE_APPENDTEXT_PIN = "No Tone pin";
Blockly.Msg.INOUT_TONE_HELPURL = "http://arduino.cc/en/reference/tone";
Blockly.Msg.INOUT_TONE_TOOLTIP = "The pin can be connected to a piezo buzzer or other speaker to play tones.";
Blockly.Msg.INTEGER = "Integer";
Blockly.Msg.INTERRUPTS_ATTACH_HELPURL = "https://www.arduino.cc/en/Reference/AttachInterrupt";
Blockly.Msg.INTERRUPTS_ATTACH_TITLE = "Attach Interrupt";
Blockly.Msg.INTERRUPTS_ATTACH_TOOLTIP = "The first parameter to attachInterrupt is an interrupt number.";
Blockly.Msg.INTERRUPTS_DETACH_HELPURL = "https://www.arduino.cc/en/Reference/DetachInterrupt";
Blockly.Msg.INTERRUPTS_DETACH_TITLE = "Detach Interrupt";
Blockly.Msg.INTERRUPTS_DETACH_TOOLTIP = "Turns off the given interrupt.";
Blockly.Msg.INTERRUPTS_HELPURL = "https://www.arduino.cc/en/Reference/Interrupts";
Blockly.Msg.INTERRUPTS_NO_HELPURL = "https://www.arduino.cc/en/Reference/NoInterrupts";
Blockly.Msg.INTERRUPTS_NO_TITLE = "noInterrupts";
Blockly.Msg.INTERRUPTS_NO_TOOLTIP = "Disables interrupts (you can re-enable them with interrupts()).";
Blockly.Msg.INTERRUPTS_TITLE = "interrupts";
Blockly.Msg.INTERRUPTS_TOOLTIP = "Re-enables interrupts (after they've been disabled by noInterrupts()). ";
Blockly.Msg.IR_REMOTE_BUTTON_HELPURL = 'http://z3t0.github.io/Arduino-IRremote/';
Blockly.Msg.IR_REMOTE_GET = "get new button press on pin";
Blockly.Msg.IR_REMOTE_BUTTON_BUTTON = ' button';
Blockly.Msg.IR_REMOTE_BUTTON_POWER = 'Power';
Blockly.Msg.IR_REMOTE_BUTTON_A = 'A';
Blockly.Msg.IR_REMOTE_BUTTON_B = 'B';
Blockly.Msg.IR_REMOTE_BUTTON_C = 'C';
Blockly.Msg.IR_REMOTE_BUTTON_UP = 'Up';
Blockly.Msg.IR_REMOTE_BUTTON_DOWN = 'Down';
Blockly.Msg.IR_REMOTE_BUTTON_LEFT = 'Left';
Blockly.Msg.IR_REMOTE_BUTTON_RIGHT = 'Right';
Blockly.Msg.IR_REMOTE_BUTTON_SELECT = 'Select';
Blockly.Msg.IR_REMOTE_TOOLTIP_GET = 'Poll for a new button input on the given pin.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_POWER = 'The \'power\' button on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_A = 'The \'A\' button on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_B = 'The \'B\' button on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_C = 'The \'C\' button on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_UP = 'The up arrow on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_DOWN = 'The down arrow on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_LEFT = 'The left arrow on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_RIGHT = 'The right arrow on the remote.';
Blockly.Msg.IR_REMOTE_TOOLTIP_BUTTON_SELECT = 'The select button on the remote (the circle in the middle of the arrows).';
Blockly.Msg.IP_ADDRESS = "IP Address";
Blockly.Msg.LATITUDE = "Latitude";
Blockly.Msg.LCD_AUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalAutoscroll";
Blockly.Msg.LCD_AUTOSCROLL_TITLE = "AutoScroll";
Blockly.Msg.LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";
Blockly.Msg.LCD_BEGIN_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalBegin";
Blockly.Msg.LCD_BEGIN_TITLE = "begin";
Blockly.Msg.LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display.";
Blockly.Msg.LCD_CLEAR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalClear";
Blockly.Msg.LCD_CLEAR_TITLE = "Clear";
Blockly.Msg.LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";
Blockly.Msg.LCD_INIT_D4 = "D4";
Blockly.Msg.LCD_INIT_D5 = "D5";
Blockly.Msg.LCD_INIT_D6 = "D6";
Blockly.Msg.LCD_INIT_D7 = "D7";
Blockly.Msg.LCD_INIT_ENABLE = "enable";
Blockly.Msg.LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";
Blockly.Msg.LCD_INIT_RS = "rs";
Blockly.Msg.LCD_INIT_RW = "rw";
Blockly.Msg.LCD_INIT_TITLE = "Pin";
Blockly.Msg.LCD_INIT_TOOLTIP = "Creates a variable of type LiquidCrystal.";
Blockly.Msg.LCD_LEFTTORIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalLeftToRight";
Blockly.Msg.LCD_LEFTTORIGHT_TITLE = "LeftToRight";
Blockly.Msg.LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right, the default.";
Blockly.Msg.LCD_NOAUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalNoAutoscroll";
Blockly.Msg.LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";
Blockly.Msg.LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";
Blockly.Msg.LCD_PRINT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalPrint";
Blockly.Msg.LCD_PRINT_TITLE = "Print";
Blockly.Msg.LCD_PRINT_TOOLTIP = "Prints text to the LCD.";
Blockly.Msg.LCD_RIGHTTOLEFT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalRightToLeft";
Blockly.Msg.LCD_RIGHTTOLEFT_TITLE = "RightToLeft";
Blockly.Msg.LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayLeft";
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";
Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalScrollDisplayRight";
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";
Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";
Blockly.Msg.LCD_SETCURSOR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalSetCursor";
Blockly.Msg.LCD_SETCURSOR_TITLE = "setCursor";
Blockly.Msg.LCD_SETCURSOR_TOOLTIP = "Position the LCD cursor.";
Blockly.Msg.LEFT = "Left";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty Array";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE_PROCEDURE = "create empty Variable Array";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lists";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this lists block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create lists with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the lists.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if text is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE1 = " is empty";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TITLE1 = "length of ";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TITLE1 = "create list with item ";
Blockly.Msg.LISTS_REPEAT_TITLE2 = " repeated ";
Blockly.Msg.LISTS_REPEAT_TITLE3 = " times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LISTS_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LOAD_XML = "Load XML";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.LONGITUDE = "Longitude";
Blockly.Msg.LOW = "Low";
Blockly.Msg.HIGH = "High";
Blockly.Msg.M2X_BEGIN_TITLE = "Begin";
Blockly.Msg.M2X_BEGIN_TOOLTIP = "Set Config.";
Blockly.Msg.M2X_CUSTOM_LIST_VALUE_TOOLTIP = "";
Blockly.Msg.M2X_DATE0_TITLE = "Start";
Blockly.Msg.M2X_DATE1_TITLE = "End";
Blockly.Msg.M2X_DELETE_VALUES_TITLE = "Delete Value";
Blockly.Msg.M2X_DELETE_VALUES_TOOLTIP = "";
Blockly.Msg.M2X_HELPURL = "https://m2x.att.com/developer/tutorials/arduino";
Blockly.Msg.M2X_KEY = "Access Key";
Blockly.Msg.M2X_LIST_VALUE_TITLE = "Get DataList";
Blockly.Msg.M2X_LIST_VALUE_TOOLTIP = "";
Blockly.Msg.M2X_LOCATION_NAME = "Location name";
Blockly.Msg.M2X_READ_LOCATION_TITLE = "Read Location";
Blockly.Msg.M2X_READ_LOCATION_TOOLTIP = "";
Blockly.Msg.M2X_STREAM_NAME = "Stream Name";
Blockly.Msg.M2X_UPDATE_LOCATION_TITLE = "Update Location";
Blockly.Msg.M2X_UPDATE_LOCATION_TOOLTIP = "";
Blockly.Msg.M2X_UPDATE_VALUE_TITLE = "Update";
Blockly.Msg.M2X_UPDATE_VALUE_TOOLTIP = "Update Data to M2X";
Blockly.Msg.MAC_ADDRESS = "Mac Address";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MODULO = "Return the remainder when one integer is divided by another.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "by";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "change number";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CHANGE_TOOLTIP1 = "Add a number to variable '";
Blockly.Msg.MATH_CHANGE_TOOLTIP2 = "'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TITLE1 = "constrain ";
Blockly.Msg.MATH_CONSTRAIN_TITLE2 = " low ";
Blockly.Msg.MATH_CONSTRAIN_TITLE3 = " high ";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MAP_APPENDTEXT_FROMHIGH = "from high";
Blockly.Msg.MATH_MAP_APPENDTEXT_FROMLOW = "from low";
Blockly.Msg.MATH_MAP_APPENDTEXT_MAP = "Map (integer)";
Blockly.Msg.MATH_MAP_APPENDTEXT_TOHIGH = "to high";
Blockly.Msg.MATH_MAP_APPENDTEXT_TOLOW = "to low";
Blockly.Msg.MATH_MAP_APPENDTEXT_VALUE = "value";
Blockly.Msg.MATH_MAP_HELPURL = "http://arduino.cc/en/Reference/map";
Blockly.Msg.MATH_MAP_TOOLTIP = "Re-maps a number from one range to another. ";
Blockly.Msg.MATH_MAP_FLOAT_APPENDTEXT_MAP = "Map (float)";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_SYMBOL = "%";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TITLE1 = "remainder of ";
Blockly.Msg.MATH_MODULO_TITLE2 = " ÷ ";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_POW_BASE = "base";
Blockly.Msg.MATH_POW_EXP = "exponent";
Blockly.Msg.MATH_POW_HELPURL = "http://arduino.cc/en/Reference/pow";
Blockly.Msg.MATH_POW_TITLE = "Pow";
Blockly.Msg.MATH_POW_TOOLTIP = "Calculates the value of a number raised to a power.";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TITLE1 = "random integer from ";
Blockly.Msg.MATH_RANDOM_INT_TITLE2 = " to ";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_MAX = "max";
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_MIN = "min";
Blockly.Msg.MATH_RANDOM_MAX_MIN_APPENDTEXT_RANDOM = "random";
Blockly.Msg.MATH_RANDOM_MAX_MIN_HELPURL = "http://arduino.cc/en/Reference/Random";
Blockly.Msg.MATH_RANDOM_MAX_MIN_TOOLTIP = "The random function generates pseudo-random numbers.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.MATH_DEGREE_TO_RADIAN_HELPURL = "https://en.wikipedia.org/wiki/Radian";
Blockly.Msg.MATH_DEGREE_TO_RADIAN_TITLE = "Degree";
Blockly.Msg.MATH_DEGREE_TO_RADIAN_APPEND = "to Radian";
Blockly.Msg.MATH_DEGREE_TO_RADIAN_TOOLTIP = "";
Blockly.Msg.ME = "Me";
Blockly.Msg.MODE = "Mode";
Blockly.Msg.MPR121_BEGIN_TITLE = "Begin";
Blockly.Msg.MPR121_BEGIN_TOOLTIP = "initialize the sensor";
Blockly.Msg.MPR121_BEGIN_WARNING = "Need to install the Adafruit_MPR121 library.";
Blockly.Msg.MPR121_HELPURL = "https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/wiring#download-adafruit-mpr121";
Blockly.Msg.MPR121_POSITION = "Position";
Blockly.Msg.MPR121_RELEASED_TITLE = "Released";
Blockly.Msg.MPR121_RELEASED_TOOLTIP = "relesed the sensor";
Blockly.Msg.MPR121_RESET_TITLE = "Reset";
Blockly.Msg.MPR121_RESET_TOOLTIP = "Reset the sensor";
Blockly.Msg.MPR121_TOUCHED_TITLE = "Touched";
Blockly.Msg.MPR121_TOUCHED_TOOLTIP = "touched the sensor";
Blockly.Msg.MPR121_VALUE_TITLE = "Capacitance Value";
Blockly.Msg.MPR121_VALUE_TOOLTIP = "value of capacitance";
Blockly.Msg.MPR121_WARNING = "Need to Begin block.";
Blockly.Msg.NEOPIXEL_BEGIN_BRIGHTNESS = "Brightness";
Blockly.Msg.NEOPIXEL_TITLE = "RGB LED Stripe"
Blockly.Msg.NEOPIXEL_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.NEOPIXEL_BEGIN_NUM = "LED Num";
Blockly.Msg.NEOPIXEL_BEGIN_PIN = "Pin";
Blockly.Msg.NEOPIXEL_BEGIN_SETTING = "Init";
Blockly.Msg.NEOPIXEL_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";
Blockly.Msg.NEOPIXEL_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_B = "B";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_G = "G";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_R = "R";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR = "Set next refresh color";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TARGET = "Target";
Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values, from 0,0,0 up to 255,255,255";
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TARGET = "Target";
Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";
Blockly.Msg.NEOPIXEL_SHOW = "Show";
Blockly.Msg.NEOPIXEL_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.NEOPIXEL_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";
Blockly.Msg.NEOPIXEL_WARNING = "Need to Begin Block.";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.OFF = "Off";
Blockly.Msg.ON = "On";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PIN = "Pin";
Blockly.Msg.POPUP_SAVE_DONE = "Save Done";
Blockly.Msg.PORT = "Port";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP1 = "Run the user-defined function '";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP2 = "'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP1 = "Run the user-defined function '";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP2 = "' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_CREATE_DO1 = "Create '";
Blockly.Msg.PROCEDURES_CREATE_DO2 = "'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "function";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "void";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.RANGE_TITLE = "Interval (min)";
Blockly.Msg.RE = "re";
Blockly.Msg.REBOOT = "Please Reboot";
Blockly.Msg.RED = "Red";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.RENAME_VARIABLE_TITLE1 = "Rename all '";
Blockly.Msg.RENAME_VARIABLE_TITLE2 = "' variables to:";
Blockly.Msg.REPLACE_TEXT1 = "Replace existing blocks?";
Blockly.Msg.REPLACE_TEXT2 = "[Cancel] will merge.";
Blockly.Msg.RGBLED_BEGIN_BRIGHTNESS = "Brightness";
Blockly.Msg.RGBLED_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.RGBLED_BEGIN_NUM = "LED Num";
Blockly.Msg.RGBLED_BEGIN_PIN = "Pin";
Blockly.Msg.RGBLED_BEGIN_SETTING = "Init";
Blockly.Msg.RGBLED_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";
Blockly.Msg.RGBLED_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_B = "B";
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_G = "G";
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_R = "R";
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TARGET = "Target";
Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values, from 0,0,0 up to 255,255,255";
Blockly.Msg.RGBLED_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.RGBLED_SETPIXELCOLOR_TARGET = "Target";
Blockly.Msg.RGBLED_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";
Blockly.Msg.RGBLED_SHOW = "Show";
Blockly.Msg.RGBLED_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";
Blockly.Msg.RGBLED_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";
Blockly.Msg.RGBLED_WARNING = "Need to Begin Block.";
Blockly.Msg.RIGHT = "Right";
Blockly.Msg.RISING = "Rising";
Blockly.Msg.ROW = "Row";
Blockly.Msg.SAVE_XML = "Save XML";
Blockly.Msg.SAVE_FIRST = "Save the file first to open it in Arduino IDE"
Blockly.Msg.SERIAL_INIT = "Serial Begin";
Blockly.Msg.SERIAL_INIT_HELPURL = "https://www.arduino.cc/en/Serial/Begin";
Blockly.Msg.SERIAL_INIT_TOOLTIP = "Sets the data rate in bits per second (baud) for serial data transmission.";
Blockly.Msg.SERIAL_AVAILABLE_APPENDTEXT = "Serial available";
Blockly.Msg.SERIAL_AVAILABLE_HELPURL = "http://www.arduino.cc/en/Serial/available";
Blockly.Msg.SERIAL_AVAILABLE_TOOLTIP = "Get the number of bytes (characters) available for reading from the serial port.";
Blockly.Msg.SERIAL_BYTE_NUMBER = "Byte Code of Number";
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT1 = "Byte code of";
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT2 = "";
Blockly.Msg.SERIAL_PRINTLN_APPENDTEXT = "Serial println";
Blockly.Msg.SERIAL_PRINTLN_HELPURL = "http://www.arduino.cc/en/Serial/Println";
Blockly.Msg.SERIAL_PRINTLN_TOOLTIP = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";
Blockly.Msg.SERIAL_PRINT_APPENDTEXT = "Serial print";
Blockly.Msg.SERIAL_PRINT_HELPURL = "http://www.arduino.cc/en/Serial/Print";
Blockly.Msg.SERIAL_PRINT_TOOLTIP = "Prints data to the console/serial port as human-readable ASCII text.";
Blockly.Msg.SERIAL_READ_APPENDTEXT = "Serial read";
Blockly.Msg.SERIAL_READ_HELPURL = "http://www.arduino.cc/en/Serial/Read";
Blockly.Msg.SERIAL_READ_TOOLTIP = "the first byte of incoming serial data available (or -1 if no data is available).";
Blockly.Msg.SERVER = "Server";
Blockly.Msg.SERVO_ANGLE_TEXT1 = "angle (1 - 180)";
Blockly.Msg.SERVO_ANGLE_TEXT2 = "";
Blockly.Msg.SERVO_ANGLE_US_TEXT1 = "pulse width";
Blockly.Msg.SERVO_ANGLE_US_TEXT2 = "";
Blockly.Msg.SERVO_ATTACHED_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttached";
Blockly.Msg.SERVO_ATTACHED_TEXT1 = "Pin";
Blockly.Msg.SERVO_ATTACHED_TEXT2 = "Attached?";
Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "Check whether the Servo variable is attached to a pin.";
Blockly.Msg.SERVO_ATTACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttach";
Blockly.Msg.SERVO_ATTACH_MAX_TEXT1 = "max";
Blockly.Msg.SERVO_ATTACH_MAX_TEXT2 = "";
Blockly.Msg.SERVO_ATTACH_MIN_TEXT1 = "min";
Blockly.Msg.SERVO_ATTACH_MIN_TEXT2 = "";
Blockly.Msg.SERVO_ATTACH_TEXT1 = "Attach servo pin";
Blockly.Msg.SERVO_ATTACH_TEXT2 = "";
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach the Servo variable to a pin.";
Blockly.Msg.SERVO_DETACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoDetach";
Blockly.Msg.SERVO_DETACH_TEXT1 = "Pin";
Blockly.Msg.SERVO_DETACH_TEXT2 = "Detach";
Blockly.Msg.SERVO_DETACH_TOOLTIP = "Detach the Servo variable from its pin.";
Blockly.Msg.SERVO_READ_HELPURL = "http://www.arduino.cc/en/Reference/ServoRead";
Blockly.Msg.SERVO_READ_TEXT1 = "Read servo pin";
Blockly.Msg.SERVO_READ_TEXT2 = "current angle";
Blockly.Msg.SERVO_READ_TOOLTIP = "Read the current angle of the servo (the value passed to the last call to write()).";
Blockly.Msg.SERVO_WRITE_HELPURL = "http://www.arduino.cc/en/Reference/ServoWrite";
Blockly.Msg.SERVO_WRITE_TEXT1 = "Write servo pin";
Blockly.Msg.SERVO_WRITE_TEXT2 = "";
Blockly.Msg.SERVO_WRITE_TOOLTIP = "Writes a value to the servo, controlling the shaft accordingly.";
Blockly.Msg.SERVO_WRITE_US_HELPURL = "http://www.arduino.cc/en/Reference/ServoWriteMicroseconds";
Blockly.Msg.SERVO_WRITE_US_TOOLTIP = "Writes a value in microSeconds(uS) to the servo, controlling the shaft accordingly.";
Blockly.Msg.SETTING = "Setting";
Blockly.Msg.SHEILD_BOT_WARNING = "Need to install Shield Bot 1.2 library";
Blockly.Msg.SHIELD_BOT_BACKWARD = "Backward";
Blockly.Msg.SHIELD_BOT_CONTROL = "Control";
Blockly.Msg.SHIELD_BOT_DRIVE_TITLE = "Drive";
Blockly.Msg.SHIELD_BOT_DRIVE_TOOLTIP = "All purpose drive call. Calls leftMotor and rightMotor directly.";
Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFTTOOLTIP = "Disables the left motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";
Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFT_TITLE = "FastStop(left)";
Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TITLE = "FastStop(right)";
Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TOOLTIP = "Disables the right motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";
Blockly.Msg.SHIELD_BOT_FASTSTOP_TITLE = "FastStop";
Blockly.Msg.SHIELD_BOT_FASTSTOP_TOOLTIP = "Disables the motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";
Blockly.Msg.SHIELD_BOT_FORWARD = "Forward";
Blockly.Msg.SHIELD_BOT_HELPURL = "http://www.seeedstudio.com/wiki/Shield_Bot_V1.2";
Blockly.Msg.SHIELD_BOT_LEFT_SPEED = "Left";
Blockly.Msg.SHIELD_BOT_MOTOR = "Motor";
Blockly.Msg.SHIELD_BOT_MOTOR_TOOLTIP = "Enables the right or left motor, negative for backwards, positive for forwards.";
Blockly.Msg.SHIELD_BOT_MOVE_TITLE = "Move";
Blockly.Msg.SHIELD_BOT_MOVE_TOOLTIP = "Move Carbot.";
Blockly.Msg.SHIELD_BOT_READ_SENSOR_TITLE = "Read Sensor";
Blockly.Msg.SHIELD_BOT_READ_SENSOR_TOOLTIP = "Reads any of the 5 light sensors on board.";
Blockly.Msg.SHIELD_BOT_RIGHT_SPEED = "Right";
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_LR_TOOLTIP = "Write a max speed to the left and right motor. Between 0(basically off) and 255(full speed)";
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TITLE = "MotorSpeed";
Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TOOLTIP = "Set max speed of two motors. Between 0(basically off) and 255(full speed)";
Blockly.Msg.SHIELD_BOT_STOP = "Stop";
Blockly.Msg.SHIELD_BOT_STOPLEFT = "StopLeft";
Blockly.Msg.SHIELD_BOT_STOPRIGHT = "StopRight";
Blockly.Msg.STRING = "String";
Blockly.Msg.TERM = "Console";
Blockly.Msg.TEXT = "Text";
Blockly.Msg.TEXTAREA_EXPORT_LABEL = "Copy Code";
Blockly.Msg.TEXTAREA_IMPORT_LABEL = "Paste Code";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_APPEND_TOOLTIP1 = "Append some text to variable '";
Blockly.Msg.TEXT_APPEND_TOOLTIP2 = "'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START1 = "get letter #";
Blockly.Msg.TEXT_CHARAT_FROM_START2 = "";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_COMMENTOUT_APPENDTEXT = "Comment out";
Blockly.Msg.TEXT_COMMENTOUT_HELPURL = "";
Blockly.Msg.TEXT_COMMENTOUT_TOOLTIP = "";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TITLE1 = " is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "String length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TITLE1 = "print ";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TIMES_DELAYMICROSECONDS_APPENDTEXT = "delayMicroseconds";
Blockly.Msg.TIMES_DELAYMICROSECONDS_HELPURL = "http://arduino.cc/en/Reference/DelayMicroseconds";
Blockly.Msg.TIMES_DELAYMICROSECONDS_TOOLTIP = "Pauses the program for the amount of time (in microseconds) specified as parameter.";
Blockly.Msg.TIMES_DELAY_APPENDTEXT = "delay";
Blockly.Msg.TIMES_DELAY_HELPURL = "http://arduino.cc/en/Reference/delay";
Blockly.Msg.TIMES_DELAY_TOOLTIP = "Delay specific time";
Blockly.Msg.TIMES_MICROS_APPENDTEXT = "micros";
Blockly.Msg.TIMES_MICROS_HELPURL = "hhttp://arduino.cc/en/Reference/Micros";
Blockly.Msg.TIMES_MICROS_TOOLTIP = "Returns the number of microseconds since the Arduino board began running the current program.";
Blockly.Msg.TIMES_MILLIS_APPENDTEXT = "millis";
Blockly.Msg.TIMES_MILLIS_HELPURL = "hhttp://arduino.cc/en/Reference/Millis";
Blockly.Msg.TIMES_MILLIS_TOOLTIP = "Returns the number of milliseconds since the Arduino board began running the current program.";
Blockly.Msg.TIMES_DATETIME_FROM_WIFI_APPENDTEXT = "Retreive current time from internet (UTC+8)";
Blockly.Msg.TIMES_DATETIME_FROM_WIFI_HELPURL = "https://en.wikipedia.org/wiki/Network_Time_Protocol";
Blockly.Msg.TIMES_DATETIME_FROM_WIFI_TOOLTIP = "Please connect to Wi-Fi network first. This block retreives time with NTP protocol. The resulting string format is:YY-MM-DDTHH:MM:SS";
Blockly.Msg.TIMES_DATETIME_RTC_HELPURL = "https://en.wikipedia.org/wiki/Real-time_clock";
Blockly.Msg.TIMES_DATETIME_SET_RTC_STRING_APPENDTEXT = "Set RTC Date and Time with String";
Blockly.Msg.TIMES_DATETIME_SET_RTC_STRING_TOOLTIP = "Set date and time to RTC(Real-time Clock) with a string. The string must be of format:YY-MM-DDTHH:MM:SS";
Blockly.Msg.TIMES_DATETIME_SET_RTC_NUMBER_APPENDTEXT = "Set date and time of RTC with";
Blockly.Msg.TIMES_DATETIME_SET_RTC_NUMBER_TOOLTIP = "Set the year/month/day/hour/minute/second of RTC with seperate numbers";
Blockly.Msg.TIMES_DATETIME_GET_RTC = "Retreive Current Date Time from RTC";
Blockly.Msg.TIMES_DATETIME_GET_RTC_TOOLTIP = "The resulting string format is:YY-MM-DDTHH:MM:SS";
Blockly.Msg.TIMES_DATETIME_GET_RTC_UNIT = "Get Field from Time String:";
Blockly.Msg.TIMES_DATETIME_GET_RTC_UNIT_TOOLTIP = "Get a single field from time string as a number。Please choose the field to get (year/month/day/hour/minute/second)";
Blockly.Msg.TIMES_DATETIME_RTC_APPENDTEXT_YEAR = "Year";
Blockly.Msg.TIMES_DATETIME_RTC_APPENDTEXT_MONTH = "Month";
Blockly.Msg.TIMES_DATETIME_RTC_APPENDTEXT_DAY = "Day";
Blockly.Msg.TIMES_DATETIME_RTC_APPENDTEXT_HOUR = "Hour";
Blockly.Msg.TIMES_DATETIME_RTC_APPENDTEXT_MIN = "Minute";
Blockly.Msg.TIMES_DATETIME_RTC_APPENDTEXT_SEC = "Second";

Blockly.Msg.TODAY = "Today";
Blockly.Msg.ULTRASONIC_DISTANCE_HELPURL = "";
Blockly.Msg.ULTRASONIC_DISTANCE_TITLE = "Distance";
Blockly.Msg.ULTRASONIC_MAXRANGE_HELPURL = "";
Blockly.Msg.ULTRASONIC_MAXRANGE_TITLE = "MaxRange";
Blockly.Msg.ULTRASONIC_MAXRANGE_TOOLTIP = "";
Blockly.Msg.ULTRASONIC_SETTING_ECHO = "Echo";
Blockly.Msg.ULTRASONIC_SETTING_HELPURL = "";
Blockly.Msg.ULTRASONIC_SETTING_RESET = "Reset";
Blockly.Msg.ULTRASONIC_SETTING_TITLE = "Pin";
Blockly.Msg.ULTRASONIC_SETTING_TOOLTIP = "";
Blockly.Msg.ULTRASONIC_SETTING_TRIG = "Trig";
Blockly.Msg.URL = "URL";
Blockly.Msg.VALUE = "Value";
Blockly.Msg.VARIABLE = "Variable";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_CREATE_SET1 = "Create 'set ";
Blockly.Msg.VARIABLES_GET_CREATE_SET2 = "'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_CREATE_GET1 = "Create 'get ";
Blockly.Msg.VARIABLES_SET_CREATE_GET2 = "'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TAIL = "to";
Blockly.Msg.VARIABLES_SET_TITLE = "Declare";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.VARIABLES_TYPE_ANY = "Any";
Blockly.Msg.VARIABLES_TYPE_ARRAY = "Array int";
Blockly.Msg.VARIABLES_TYPE_ARRAY0 = "int";
Blockly.Msg.VARIABLES_TYPE_ARRAY1 = "Array string"
Blockly.Msg.VARIABLES_TYPE_ARRAY2 = "Array char"
Blockly.Msg.VARIABLES_TYPE_ARRAY2D = "Array2D int";
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "boolean";
Blockly.Msg.VARIABLES_TYPE_BYTE = "byte";
Blockly.Msg.VARIABLES_TYPE_CHAR = "char";
Blockly.Msg.VARIABLES_TYPE_COLOUR = "Colour";
Blockly.Msg.VARIABLES_TYPE_DOUBLE = "double";
Blockly.Msg.VARIABLES_TYPE_FLOAT = "float";
Blockly.Msg.VARIABLES_TYPE_LONG = "long";
Blockly.Msg.VARIABLES_TYPE_NUMBER = "int";
Blockly.Msg.VARIABLES_TYPE_STRING = "String";
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_INT = "unsigned int";
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_LONG = "unsigned long";
Blockly.Msg.VARIABLES_TYPE_VOLATILE_INT = "volatile int";
Blockly.Msg.VARIABLES_TYPE_WORD = "word";

Blockly.Msg.VARIABLES_TYPE_VOID = "void";
Blockly.Msg.VARIABLES_TYPE_ARRAY = "array";
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "boolean";
Blockly.Msg.VARIABLES_TYPE_BYTE = "byte";
Blockly.Msg.VARIABLES_TYPE_CHAR = "char";
Blockly.Msg.VARIABLES_TYPE_CHAR1 = "char*";
Blockly.Msg.VARIABLES_TYPE_CHAR2 = "const char*";
Blockly.Msg.VARIABLES_TYPE_DOUBLE = "double";
Blockly.Msg.VARIABLES_TYPE_FLOAT = "float";
Blockly.Msg.VARIABLES_TYPE_INT = "int";
Blockly.Msg.VARIABLES_TYPE_LONG = "long";
Blockly.Msg.VARIABLES_TYPE_SHORT = "short";
Blockly.Msg.VARIABLES_TYPE_SIZET = "size_t";
Blockly.Msg.VARIABLES_TYPE_STRING = "String";
Blockly.Msg.VARIABLES_TYPE_UNSIGNEDCHAR = "unsigned char";
Blockly.Msg.VARIABLES_TYPE_UNSIGNEDINT = "unsigned int";
Blockly.Msg.VARIABLES_TYPE_UNSIGNEDLONG = "unsigned long";
Blockly.Msg.VARIABLES_TYPE_UNSIGNEDWORD = "word";

Blockly.Msg.XML = "XML";
Blockly.Msg.YELLOW = "Yellow";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;

// LinkIt
Blockly.Msg.CATEGORY_LINKIT = "LinkIt 7697";
// Wi-Fi
Blockly.Msg.CATEGORY_LINKIT_WIFI = "Wi-Fi";
Blockly.Msg.CATEGORY_LINKIT_WIFI_DISCONNECT = "Disconnect Wi-Fi";
Blockly.Msg.CATEGORY_LINKIT_WIFI_ADVANCED = "Wi-Fi (Advanced)";
Blockly.Msg.LINKIT_SET_WIFI_HELPURL = "";
Blockly.Msg.LINKIT_SET_WIFI_TITLE = "Wi-Fi Setup";
Blockly.Msg.LINKIT_SET_WIFI_SSID = "Wi-Fi ID";
Blockly.Msg.LINKIT_SET_WIFI_PASSWORD = "Wi-Fi Password";
Blockly.Msg.LINKIT_SET_WIFI_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_NO_SHIELD = "No Wi-Fi Sheld";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_IDLE = "Idle";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_NO_SSID_AVAIL = "No SSID Available";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_SCAN_COMPLETED = "Scan Completed";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_CONNECTED = "Connected";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_CONNECT_FAILED = "Connect Failed";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_CONNECTION_LOST = "Connection Lost";
Blockly.Msg.LINKIT_SET_WIFI_STATUS_DISCONNECTED = "Disconnected";
Blockly.Msg.LINKIT_SET_WIFI_READY_TITLE = "Wi-Fi Connected";
Blockly.Msg.LINKIT_SET_WIFI_UNTIL_READY_TITLE = "Connect to Wi-Fi AP";
Blockly.Msg.LINKIT_GET_WIFI_IP_TITLE = "Get Wi-Fi IP Address";
// MCS
Blockly.Msg.LINKIT_SET_MCS_HELPURL = "";
Blockly.Msg.LINKIT_SET_MCS_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_MCS_WIFI = "Connect to MCS";
Blockly.Msg.LINKIT_SET_MCS_DEVICEID = "DeviceID";
Blockly.Msg.LINKIT_SET_MCS_DEVICEKEY = "DeviceKey";
Blockly.Msg.LINKIT_SET_MCS_CHANNEL1_TITLE = "Add MCS ";
Blockly.Msg.LINKIT_SET_MCS_CHANNEL1_TAIL = "controller channel";
Blockly.Msg.LINKIT_SET_MCS_CHANNEL2_TAIL = "display channel";
Blockly.Msg.LINKIT_CHECK_MCS_CONNECTED_TITLE = "MCS Connected";
Blockly.Msg.LINKIT_CHECK_MCS_RECONNECT_TITLE = "MCS Reconnect";
Blockly.Msg.LINKIT_CHECK_MCS_LED_VALID_TITLE = "controller channel valid";
Blockly.Msg.LINKIT_CHECK_MCS_LED_VALUE_TITLE = "Get";
Blockly.Msg.LINKIT_CHECK_MCS_LED_VALUE_TAIL = "controller channel value";
Blockly.Msg.LINKIT_CHECK_MCS_REMOTE_VALUE_TITLE = "Set";
Blockly.Msg.LINKIT_CHECK_MCS_REMOTE_VALUE_TAIL = "display channel value to";
Blockly.Msg.LINKIT_MCS_WAIT_UNTIL_CONNECTED_TITLE = "Connecting to MCS..";
Blockly.Msg.LINKIT_MCS_LED_WAIT_UNTIL_READ_VALUE_TITLE = "Waiting for controller channel...";
Blockly.Msg.LINKIT_ADD_MCS_CHANNEL_TITLE = "Adding channel";
Blockly.Msg.LINKIT_MCS_CHANNEL = "Channel";
Blockly.Msg.LINKIT_MCS_PROCESS_TITLE = "Synchronize with MCS";
Blockly.Msg.CATEGORY_LINKIT_MCS = "MCS";
Blockly.Msg.LINKIT_MCS_LED_UPDATED = "controller channel updated";
// MCSLite
Blockly.Msg.LINKIT_SET_MCSLITE_HELPURL = "";
Blockly.Msg.LINKIT_SET_MCSLITE_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_MCSLITE_WIFI = "Connect to MCSLite";
Blockly.Msg.LINKIT_SET_MCSLITE_DEVICEID = "DeviceID";
Blockly.Msg.LINKIT_SET_MCSLITE_DEVICEKEY = "DeviceKey";
Blockly.Msg.LINKIT_SET_MCSLITE_SERV = "IP Address";
Blockly.Msg.LINKIT_SET_MCSLITE_PORT = "Port";
Blockly.Msg.LINKIT_SET_MCSLITE_CHANNEL1_TITLE = "Add MCS ";
Blockly.Msg.LINKIT_SET_MCSLITE_CHANNEL1_TAIL = "controller channel";
Blockly.Msg.LINKIT_SET_MCSLITE_CHANNEL2_TAIL = "display channel";
Blockly.Msg.LINKIT_CHECK_MCSLITE_CONNECTED_TITLE = "MCS Connected";
Blockly.Msg.LINKIT_CHECK_MCSLITE_RECONNECT_TITLE = "MCS Reconnect";
Blockly.Msg.LINKIT_CHECK_MCSLITE_LED_VALID_TITLE = "controller channel valid";
Blockly.Msg.LINKIT_CHECK_MCSLITE_LED_VALUE_TITLE = "Get MCS ";
Blockly.Msg.LINKIT_CHECK_MCSLITE_LED_VALUE_TAIL = "controller channel value";
Blockly.Msg.LINKIT_CHECK_MCSLITE_REMOTE_VALUE_TITLE = "Set MCS";
Blockly.Msg.LINKIT_CHECK_MCSLITE_REMOTE_VALUE_TAIL = "display channel value";
Blockly.Msg.LINKIT_MCSLITE_WAIT_UNTIL_CONNECTED_TITLE = "Connecting to MCS..";
Blockly.Msg.LINKIT_MCSLITE_LED_WAIT_UNTIL_READ_VALUE_TITLE = "Waiting for controller channel...";
Blockly.Msg.LINKIT_ADD_MCSLITE_CHANNEL_TITLE = "Adding channel";
Blockly.Msg.LINKIT_MCSLITE_CHANNEL = "Channel";
Blockly.Msg.LINKIT_MCSLITE_PROCESS_TITLE = "Synchronize with MCS";
Blockly.Msg.CATEGORY_LINKIT_MCSLITE = "MCS";
Blockly.Msg.LINKIT_MCSLITE_LED_UPDATED = "controller channel updated";
// BLE
Blockly.Msg.CATEGORY_LINKIT_BLE = "BLE";
Blockly.Msg.CATEGORY_LINKIT_BLE_BEACON = "BLE Beacon";
Blockly.Msg.LINKIT_SET_BLE_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/using-bluetooth";
Blockly.Msg.LINKIT_SET_BLE_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_BLE_GET_ADDRESS_TITLE = "Get BLE Device Address";
Blockly.Msg.LINKIT_SET_BLE_READY_TITLE = "BLE ready()";
Blockly.Msg.LINKIT_SET_BLE_UNTIL_READY_TITLE = "Wait Until BLE is ready()";
Blockly.Msg.LINKIT_SET_IBEACON_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/using-bluetooth#UsingBluetooth-UsingLinkIt7697asaniBeacon";
Blockly.Msg.LINKIT_SET_IBEACON_TITLE = "iBeacon";
Blockly.Msg.LINKIT_SET_IBEACON_UUID = "UUID";
Blockly.Msg.LINKIT_SET_IBEACON_MAJOR = "Major ID";
Blockly.Msg.LINKIT_SET_IBEACON_MINOR = "Minor ID";
Blockly.Msg.LINKIT_SET_IBEACON_RSSI = "RSSI";
Blockly.Msg.LINKIT_SET_IBEACON_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/using-bluetooth#UsingBluetooth-UsingLinkIt7697asaCentralDevice";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_SCAN_TITLE = "Scan for BLE devices";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_SCAN_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_SCAN_COUNT = "Number of found BLE peripherals";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_GET_PERIPHERAL_WITH_INDEX = "Name of # %1 BLE peripheral in index";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_GET_PERIPHERAL_WITH_INDEX1 = "Name of # ";
Blockly.Msg.LINKIT_SET_BLE_CENTRAL_GET_PERIPHERAL_WITH_INDEX2 = " BLE peripheral in index";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/using-bluetooth#UsingBluetooth-UsingLinkIt7697asaSimpleBLEPeripheral";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_TITLE = "Create BLE Peripheral";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_NAME = "Display Name";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_SERVICE = "Service UUID";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_SEC = "UUID";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_CHARACTERISTIC = "Add Characteristic";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_CHARACTERISTIC_TYPE = "Type";
Blockly.Msg.LINKIT_SET_LBLE_ATTRIBUTE = "Attribute";
Blockly.Msg.LINKIT_SET_LBLE_READ_WRITE = "Read & Write";
Blockly.Msg.LINKIT_SET_LBLE_READ = "Read";
Blockly.Msg.LINKIT_SET_LBLE_WRITE = "Write";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_TOOLTIP = "";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_WRITE = "Write in ";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_GET_VALUE = "Characteristic ";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_GET_VALUE_TAIL = " getValue";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_IS_WRITTEN = "Characteristic ";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_IS_WRITTEN_TAIL = " isWritten";
Blockly.Msg.VARIABLES_TYPE_ONOFF = "Switch (boolean)";
Blockly.Msg.VARIABLES_TYPE_CATEGORY = "Category (String)";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_EDDY = "EddyStoneURL";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_URL = "URL（includes protocol, non-protocol part must < 18 chars)";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_EDDY_URL_INVALID = "Invalid Eddy Stone URL. Correct form should be either http://domain.com or https://domain.com.";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_HTTP = "http://";
Blockly.Msg.LINKIT_SET_BLE_PERIPHRAL_HTTPS = "https://";
Blockly.Msg.LINKIT_GET_BLE_ADDRESS = "Get BLE Device Address"

//lremote
Blockly.Msg.CATEGORY_LINKIT_LREMOTE = "Remote";
Blockly.Msg.LINKIT_SET_LREMOTE_HELPFUL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote";
Blockly.Msg.LINKIT_SET_LREMOTE_ADD = "Add";
Blockly.Msg.LINKIT_SET_LREMOTE_TYPE_VERTICAL = "Vertical";
Blockly.Msg.LINKIT_SET_LREMOTE_TYPE_HORIZONTAL = "Hotizontal";
Blockly.Msg.LINKIT_SET_LREMOTE = "Remote";
Blockly.Msg.LINKIT_SET_LREMOTE_DEVICEID = "Name";
Blockly.Msg.LINKIT_SET_LREMOTE_ROW = "Row";
Blockly.Msg.LINKIT_SET_LREMOTE_COLUMN = "Column";
Blockly.Msg.LINKIT_SET_LREMOTE_TOOLTIP = "LRemote is a singleton object that allows user to design a remote control UI. It's main purpose is to hold the UI control settings and convert them to LBLE GATT attributes. ";
Blockly.Msg.LINKIT_LREMOTE_CONTROL_HELPFUL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote-control-classes";
Blockly.Msg.LINKIT_LREMOTE_ADD = "Add";
Blockly.Msg.LINKIT_LREMOTE_SETTEXT = "Label";
Blockly.Msg.LINKIT_LREMOTE_SETTEXT_CONTENT = "Text";
Blockly.Msg.LINKIT_LREMOTE_SETTEXT_SITE = "Position(x,y)";
Blockly.Msg.LINKIT_LREMOTE_SETTEXT_SIZE = "Size(w,h)";
Blockly.Msg.LINKIT_LREMOTE_COLOUR = "Colour";
Blockly.Msg.LINKIT_LREMOTE_COLOUR_ORANGE = "Orange";
Blockly.Msg.LINKIT_LREMOTE_COLOUR_BLUE = "Blue";
Blockly.Msg.LINKIT_LREMOTE_COLOUR_GREEN = "Green";
Blockly.Msg.LINKIT_LREMOTE_COLOUR_PINK = "Pink";
Blockly.Msg.LINKIT_LREMOTE_COLOUR_GRAY = "Gray";
Blockly.Msg.LINKIT_LREMOTE_COLOUR_YELLOW = "Yellow";
Blockly.Msg.LINKIT_LREMOTE_SETTEXT_TOOLTIP = "A static text label. ";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONSQUARE = "Rectangular Button";
Blockly.Msg.LINKIT_LREMOTE_SETCUTTONSQUARE_CONTENT = "Text";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONSQUARE_SITE = "Position";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONSQUARE_SIZE = "Size";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONSQUARE_TOOLTIP = "A rectangular button with a text label. ";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONCIRCLE = "Circular Label";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONCIRCLE_CONTENT = "Text";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONCIRCLE_SITE = "Position";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONCIRCLE_SIZE = "Size";
Blockly.Msg.LINKIT_LREMOTE_SETBUTTONCIRCLE_TOOLTIP = "A round, circular button with a text label. ";
Blockly.Msg.LINKIT_LREMOTE_SETSWITCH = "Switch";
Blockly.Msg.LINKIT_LREMOTE_SETSWITCH_CONTENT = "Text";
Blockly.Msg.LINKIT_LREMOTE_SETSWITCH_SITE = "Position";
Blockly.Msg.LINKIT_LREMOTE_SETSWITCH_SIZE = "Size";
Blockly.Msg.LINKIT_LREMOTE_SETSWITCH_TOOLTIP = "A on/off switch. ";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER = "Slider";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_CONTENT = "Text";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_SITE = "Position";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_SIZE = "Size";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_MINIMUM = "Minimum Value";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_MAXIMUM = "Maxumum Value";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_INITIAL = "Inital Value";
Blockly.Msg.LINKIT_LREMOTE_SETSLIDER_TOOLTIP = "A slider with adjustable range and initial value. ";
Blockly.Msg.LINKIT_LREMOTE_SETJOYSTICK = "Joystick";
Blockly.Msg.LINKIT_LREMOTE_SETJOYSTICK_CONTENT = "Joystick";
Blockly.Msg.LINKIT_LREMOTE_SETJOYSTICK_SITE = "Position";
Blockly.Msg.LINKIT_LREMOTE_SETJOYSTICK_SIZE = "Size";
Blockly.Msg.LINKIT_LREMOTE_SETJOYSTICK_TOOLTIP = "An analog joystick";
Blockly.Msg.LINKIT_LREMOTE_CONNECT_STATUS_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote";
Blockly.Msg.LINKIT_LREMOTE_CONNECT_STATUS = "remote connected";
Blockly.Msg.LINKIT_LREMOTE_CONNECT_STATUS_TOOLTIP = "Check if the LinkIt Remote app has connected.";
Blockly.Msg.LINKIT_LREMOTE_PROCESS_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote";
Blockly.Msg.LINKIT_LREMOTE_PROCESS = "Process App Command. ";
Blockly.Msg.LINKIT_LREMOTE_PROCESS_TOOLTIP = "Processes incoming commands from the LinkIt Remote mobile app. Call this API periodically in the loop() function.";
Blockly.Msg.LINKIT_LREMOTE_IS_WRITTEN_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote-control-classes";
Blockly.Msg.LINKIT_LREMOTE_IS_WRITTEN = "is written. ";
Blockly.Msg.LINKIT_LREMOTE_IS_WRITTEN_TOOLTIP = "Check if the LinkIt Remote app has made a change to the UI control";
Blockly.Msg.LINKIT_LREMOTE_READ_VALUE_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote-control-classes";
Blockly.Msg.LINKIT_LREMOTE_READ_FROM = "Read value from";
Blockly.Msg.LINKIT_LREMOTE_READ_VALUE = "";
Blockly.Msg.LINKIT_LREMOTE_READ_VALUE_TOOLTIP = "The the current value of the control";
Blockly.Msg.LINKIT_LREMOTE_UPDATE_TEXTLABEL_HELPURL = "https://docs.labs.mediatek.com/resource/linkit7697-arduino/en/developer-guide/using-linkit-remote/lremote-control-classes";
Blockly.Msg.LINKIT_LREMOTE_UPDATE_TEXTLABEL = "Update";
Blockly.Msg.LINKIT_LREMOTE_UPDATE_TEXTLABEL_CONTENT = "Text";
Blockly.Msg.LINKIT_LREMOTE_UPDATE_TEXTLABEL_TOOLTIP = "Change the label text. You can change the text after the user has connected.";
Blockly.Msg.LINKIT_LREMOTE_TEXTLABEL = "Label";
Blockly.Msg.LINKIT_LREMOTE_SQUAREBUTTON = "Square Button";
Blockly.Msg.LINKIT_LREMOTE_CIRCLEBUTTON = "Circle Button";
Blockly.Msg.LINKIT_LREMOTE_SWITCH = "Switch";
Blockly.Msg.LINKIT_LREMOTE_SLIDER = "Slider";
Blockly.Msg.LINKIT_LREMOTE_JOYSTICK = "Joystick";

Blockly.Msg.CATEGORY_EXTERNAL = "External";
Blockly.Msg.CATEGORY_BETA = "Untested";
Blockly.Msg.CATEGORY_SENSOR = "Sensor";
Blockly.Msg.CATEGORY_DISPLAY = "Display";
Blockly.Msg.CATEGORY_SENSING_ENV = "Environment";
Blockly.Msg.CATEGORY_SENSING_DIST = "Distance";
Blockly.Msg.CATEGORY_SENSING_MOTION = "Motion";
Blockly.Msg.CATEGORY_TRANSCEIVER = "Tranceiver";
Blockly.Msg.CATEGORY_INFRARED = "Infrared";
Blockly.Msg.CATEGORY_RFID = "RFID";


Blockly.Msg.BUTTON_UPLOAD = "Upload";
Blockly.Msg.BUTTON_LAUNCH_IDE = "Launch Arduino IDE";
Blockly.Msg.BUTTON_BOARD_SETTINGS = "Board Settings";
Blockly.Msg.TEXT_UPLOADER_STATUS = "Uploader Status";
Blockly.Msg.TEXT_BOARD = "Board";
Blockly.Msg.TEXT_COM_PORT = "COM Port";
Blockly.Msg.DROPDOWN_SCANNING = "Scanning for COM port...";

Blockly.Msg.TEMPERATURE_CELCIUS = "Temperature C";
Blockly.Msg.TEMPERATURE_FERENHEIT = "Temperature F";
Blockly.Msg.HUMIDITY_PERCENT = "Humidity %";
Blockly.Msg.SIGNAL_PIN = "Pin";
Blockly.Msg.MESUREMENT_TYPE = "Content";
Blockly.Msg.CATEGORY_OLED = "OLED Display";

Blockly.Msg.ADXL345_HELPURL = "https://github.com/adafruit/Adafruit_ADXL345";
Blockly.Msg.ADXL345_READ_X = "X-Axis";
Blockly.Msg.ADXL345_READ_Y = "Y-Axis";
Blockly.Msg.ADXL345_READ_Z = "Z-Axis";
Blockly.Msg.ADXL345_TITLE = "Accelerometer";
Blockly.Msg.ADXL345_TOOLTIP = "ADXL345 is a 3-Axis Accelerometer with I2C interface";
Blockly.Msg.ADXL345_UNIT = " G";
Blockly.Msg.ADXL345_DETECT = "Detect motion and gestures";
Blockly.Msg.ADXL345_GESTURE_DETECTED = "has detected";
Blockly.Msg.ADXL345_TAP = "tap";
Blockly.Msg.ADXL345_DOUBLE_TAP = "double tap";
Blockly.Msg.ADXL345_MOTION = "motion";
Blockly.Msg.ADXL345_ATTITUDE = "read attitude:";
Blockly.Msg.ADXL345_PITCH = "pitch";
Blockly.Msg.ADXL345_ROLL = "roll";
Blockly.Msg.ADXL345_DEGREE = "\u00b0";


Blockly.Msg.DHT_HELPURL = "https://github.com/adafruit/DHT-sensor-library";
Blockly.Msg.DHT_TITLE = "Sensor";
Blockly.Msg.DHT_TOOLTIP = "The DHT sensors are made of two parts, a capacitive humidity sensor and a thermistor.";
Blockly.Msg.DHT_WARNING = "Need to install the (adafruit) DHT-sensor-library";

Blockly.Msg.HTU21D_HELPURL = "https://github.com/sparkfun/SparkFun_HTU21D_Breakout_Arduino_Library/blob/master/src/SparkFunHTU21D.h";
Blockly.Msg.HTU21D_TITLE = "Humidity/Temperature";
Blockly.Msg.HTU21D_TOOLTIP = "Humidity/Temperature (HTU21D I2C)";
Blockly.Msg.HTU21D_WARNING = "Need to install SparkFun HTU21D library";

Blockly.Msg.INFRA_RED_HELPURL = "#";
Blockly.Msg.INFRA_RED_SEND_TEXT_PARAM = "Send number (Pin 3 Only)"
Blockly.Msg.INFRA_RED_RECEIVE_TEXT_PARAM = "Receive number"
Blockly.Msg.INFRA_RED_SEND_TITLE = "Infrared Transmitter";
Blockly.Msg.INFRA_RED_RECEIVE_TITLE = "Infrared Receiver";

Blockly.Msg.OLED_DISPLAY_HELPURL = "http://wiki.seeed.cc/Grove-OLED_Display_0.96inch/";
Blockly.Msg.OLED_DISPLAY_TITLE = "OLED Display";
Blockly.Msg.OLED_DISPLAY_CLEAR = "clearDisplay()";
Blockly.Msg.OLED_DISPLAY_SET_CURSOR = "setTextXY(";
Blockly.Msg.OLED_DISPLAY_SET_CURSOR_SEP = ",";
Blockly.Msg.OLED_DISPLAY_SET_CURSOR_APPEND = ")";
Blockly.Msg.OLED_DISPLAY_PUT = "Put";
Blockly.Msg.OLED_DISPLAY_TOOLTIP = "An OLED monochrome 128×64dot matrix display module with Grove 4pin I2C Interface.";

Blockly.Msg.OLED_DISPLAY_DRAW_LINE_START = "Draw line start:";
Blockly.Msg.OLED_DISPLAY_DRAW_LINE_END = "end:";
Blockly.Msg.OLED_DISPLAY_DRAW_BOX_START = "Draw box (left, top):";
Blockly.Msg.OLED_DISPLAY_DRAW_BOX_END = "(right, bottom):";
Blockly.Msg.OLED_DISPLAY_DRAW_FRAME_START = "Draw frame (left, top):";
Blockly.Msg.OLED_DISPLAY_DRAW_FRAME_END = "(right, bottom):";
Blockly.Msg.OLED_DISPLAY_DRAW_DISC_CENTER = "Draw disc centered at:";
Blockly.Msg.OLED_DISPLAY_DRAW_DISC_RADIUS = "with radius:";
Blockly.Msg.OLED_DISPLAY_DRAW_CIRCLE_CENTER = "Draw circle centered at:";
Blockly.Msg.OLED_DISPLAY_DRAW_CIRCLE_RADIUS = "with radius:";
Blockly.Msg.OLED_DISPLAY_SET_FONT = "Set font";
Blockly.Msg.OLED_DISPLAY_SET_FONT_LARGE = "Large";
Blockly.Msg.OLED_DISPLAY_SET_FONT_SMALL = "Small";
Blockly.Msg.OLED_DISPLAY_DRAW_TEXT_START = "Draw text at:";
Blockly.Msg.OLED_DISPLAY_DRAW_TEXT_CONTENT = "content:";

Blockly.Msg.LCD_I2C_HELPURL = "http://wiki.seeed.cc/Grove-LCD_I2C_0.96inch/";
Blockly.Msg.LCD_I2C_TITLE = "LCD Backlight";
Blockly.Msg.LCD_I2C_CLEAR = "Clear screen";
Blockly.Msg.LCD_I2C_SET_CURSOR = "Set cursor to　column";
Blockly.Msg.LCD_I2C_SET_CURSOR_SEP = " row";
Blockly.Msg.LCD_I2C_SET_CURSOR_APPEND = "";
Blockly.Msg.LCD_I2C_PUT = "Show";
Blockly.Msg.LCD_I2C_TOOLTIP = "An OLED monochrome 128×64dot matrix display module with Grove 4pin I2C Interface.";
Blockly.Msg.LCD_I2C_I2C_ADDRESS = "I2C address";
Blockly.Msg.LCD_I2C_LIGHT = "backlight";
Blockly.Msg.LCD_I2C_ON = "ON";
Blockly.Msg.LCD_I2C_OFF = "OFF";

Blockly.Msg.PMS_HELPURL = "https://github.com/fu-hsi/PMS";
Blockly.Msg.PMS_RECEIVE_TITLE = "PM2.5 Sensor";
Blockly.Msg.PMS_READ_VALIE = "read";

Blockly.Msg.MPU9250_HELPURL = "https://github.com/sparkfun/SparkFun_MPU-9250_Breakout_Arduino_Library";
Blockly.Msg.MPU9250_READ_X = "X Axis";
Blockly.Msg.MPU9250_READ_Y = "Y Axis";
Blockly.Msg.MPU9250_READ_Z = "Z Axis";
Blockly.Msg.MPU9250_TITLE = "Inertia Sensor";
Blockly.Msg.MPU9250_GROVE_TITLE = "Inertia Sensor 9DOF";
Blockly.Msg.MPU9250_TOOLTIP = "MPU9250 Inertia Sensor with I2C interface";
Blockly.Msg.MPU9250_DEGREE = "\u00b0";
Blockly.Msg.MPU9250_ACC = "read acceleration";
Blockly.Msg.MPU9250_ACC_UNIT = "G";
Blockly.Msg.MPU9250_GYRO = "read angular velocity";
Blockly.Msg.MPU9250_GYRO_UNIT = "degrees/sec";
Blockly.Msg.MPU9250_MAG = "read magnetic intensity";
Blockly.Msg.MPU9250_MAG_UNIT = "gauss";
Blockly.Msg.MPU9250_ATTITUDE = "get attitude";
Blockly.Msg.MPU9250_PITCH = "pitch";
Blockly.Msg.MPU9250_ROLL = "roll";
Blockly.Msg.MPU9250_YAW = "yaw";
Blockly.Msg.MPU9250_NORTH = "degrees between X-Axis and magnetic north pole";

Blockly.Msg.GROVE_IMU_9DOF_HELPURL = "https://github.com/sparkfun/SparkFun_MPU-9250_Breakout_Arduino_Library";
Blockly.Msg.GROVE_IMU_9DOF_READ_X = "X Axis";
Blockly.Msg.GROVE_IMU_9DOF_READ_Y = "Y Axis";
Blockly.Msg.GROVE_IMU_9DOF_READ_Z = "Z Axis";
Blockly.Msg.GROVE_IMU_9DOF_TITLE = "Inertia Sensor 9DOF";
Blockly.Msg.GROVE_IMU_9DOF_GROVE_TITLE = "Inertia Sensor 9DOF";
Blockly.Msg.GROVE_IMU_9DOF_TOOLTIP = "GROVE_IMU_9DOF Inertia Sensor with I2C interface";
Blockly.Msg.GROVE_IMU_9DOF_DEGREE = "\u00b0";
Blockly.Msg.GROVE_IMU_9DOF_ACC = "read acceleration";
Blockly.Msg.GROVE_IMU_9DOF_ACC_UNIT = "G";
Blockly.Msg.GROVE_IMU_9DOF_GYRO = "read angular velocity";
Blockly.Msg.GROVE_IMU_9DOF_GYRO_UNIT = "degrees/sec";
Blockly.Msg.GROVE_IMU_9DOF_MAG = "read magnetic intensity";
Blockly.Msg.GROVE_IMU_9DOF_MAG_UNIT = "gauss";
Blockly.Msg.GROVE_IMU_9DOF_ATTITUDE = "get attitude";
Blockly.Msg.GROVE_IMU_9DOF_PITCH = "pitch";
Blockly.Msg.GROVE_IMU_9DOF_ROLL = "roll";
Blockly.Msg.GROVE_IMU_9DOF_YAW = "yaw";
Blockly.Msg.GROVE_IMU_9DOF_NORTH = "degrees between X-Axis and magnetic north pole";

Blockly.Msg.MFRC522_RFID_HELPURL = "https://github.com/miguelbalboa/rfid";  // untranslated
Blockly.Msg.MFRC522_RFID_TITLE = "RFID";
Blockly.Msg.MFRC522_RFID_READ = "read identifier"
Blockly.Msg.MFRC522_RFID_TOOLTIP = "Returns ID string if an RFID card is detected. Empty string is returned otherwise."

Blockly.Msg.EEPROM_LENGTH_HELPURL = "https://www.arduino.cc/en/Reference/EEPROM";
Blockly.Msg.EEPROM_LENGTH_TITLE = "EEPROM Length";
Blockly.Msg.EEPROM_LENGTH_TOOLTIP = "Number of bytes avaliable in the EEPROM";
Blockly.Msg.EEPROM_WRITE_HELPURL = "https://www.arduino.cc/en/Reference/EEPROM";
Blockly.Msg.EEPROM_WRITE_TITLE = "Write a byte to EEPROM to address: ";
Blockly.Msg.EEPROM_WRITE_TOOLTIP = "The address in EEPROM and the byte value to write";
Blockly.Msg.EEPROM_READ_HELPURL = "https://www.arduino.cc/en/Reference/EEPROM";
Blockly.Msg.EEPROM_READ_TITLE = "Read a byte from EEPROM address: ";
Blockly.Msg.EEPROM_READ_TOOLTIP = "The address in EEPROM";
Blockly.Msg.EEPROM_ADDRESS = "address"
Blockly.Msg.EEPROM_VALUE = "value"


Blockly.Msg["CATVARIABLES"] = "VARIABLES";
Blockly.Msg["CATPROCEDURES"] = "FUNCTIONS";
Blockly.Msg["CATLOGIC"] = "LOGIC";
Blockly.Msg["CATLOOPS"] = "LOOPS";
Blockly.Msg["CATMATH"] = "MATH";
Blockly.Msg["CATTEXTS"] = "TEXT";
Blockly.Msg["CATCAST"] = "CAST";
Blockly.Msg["CATLISTS"] = "LISTS";
Blockly.Msg["CATCOLOUR"] = "COLOUR";
Blockly.Msg["CATINITIALIZES"] = "INITIALIZES";

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "20";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";
Blockly.Msg["CAST_HUE"] = "250";
Blockly.Msg["CATINITIALIZES_HUE"] = "50";

Blockly.Msg["ADD_COMMENT"] = "Add Comment";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Change value:";
Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colour 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colour 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "ratio";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "blend";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "random colour";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "blue";
Blockly.Msg["COLOUR_RGB_GREEN"] = "green";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_RED"] = "red";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colour with";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "do";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
Blockly.Msg["DELETE_VARIABLE"] = "Delete the '%1' variable";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicate Comment";
Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
Blockly.Msg["HELP"] = "Help";
Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
Blockly.Msg["IOS_CANCEL"] = "Cancel";
Blockly.Msg["IOS_ERROR"] = "Error";
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Add Input";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "This function has duplicate inputs.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUTS";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Add";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Add Variable";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Delete";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "You can't use an empty variable name.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rename";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variable name";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH_PROCEDURE"] = "Declare";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH_PROCEDURE_VALUE"] = "Value";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# from end";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 is the last item.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 is the first item.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
Blockly.Msg["LISTS_INLIST"] = "in list";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "List %1 is empty";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "List length of %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
Blockly.Msg["LISTS_SORT_TITLE"] = "sort %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sort a copy of a list.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "not %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "change %1 by %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
Blockly.Msg["MATH_IS_EVEN"] = "is even";
Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
Blockly.Msg["MATH_IS_ODD"] = "is odd";
Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
Blockly.Msg["MATH_IS_PRIME"] = "is prime";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "A number.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Return the base 10 logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Return the arccosine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Return the arcsine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Return the arctangent of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Return the cosine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Return the sine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Return the tangent of a degree (not radian).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";
Blockly.Msg["NEW_VARIABLE"] = "Create variable...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "New variable name:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "myFunc";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "void";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "input name:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";
Blockly.Msg["REDO"] = "Redo";
Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "to %1 append text %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "get first letter";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "get letter # from end";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "get letter #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_LAST"] = "get last letter";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "get random letter";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
Blockly.Msg["TEXT_WITH_HELPURL"] = "";  // untranslated
Blockly.Msg["TEXT_WITH_TITLE"] = "%1 from first ";
Blockly.Msg["TEXT_WITH_TOOLTIP"] = "Returns true if the provided text is empty.";
Blockly.Msg["TEXT_WITH_OPERATOR_FIRST"] = "from first compare with";
Blockly.Msg["TEXT_WITH_OPERATOR_LAST"] = "from last compare with";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "String length of %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "print %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg["TODAY"] = "Today";
Blockly.Msg["UNDO"] = "Undo";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg.VARIABLES_CHANGETYPE_TOINT = "toInt()";
Blockly.Msg.VARIABLES_CHANGETYPE_TODOUBLE = "toDouble()";
Blockly.Msg.VARIABLES_CHANGETYPE_TOFLOAT = "toFloat()";
Blockly.Msg.VARIABLES_CHANGETYPE_TOLOWERCASE = "toLowerCase()";
Blockly.Msg.VARIABLES_CHANGETYPE_TOUPPERCASE = "toUpperCase()";
Blockly.Msg.VARIABLES_CHANGETYPE_TRIM = "trim()";
Blockly.Msg.VARIABLES_CHANGETYPE_CSTR = "c_str()";
Blockly.Msg.VARIABLES_CHANGETYPE_LENGTH = "length()";

Blockly.Msg.VARIABLES_TYPE_POSITION_GLOBAL = "Global";
Blockly.Msg.VARIABLES_TYPE_POSITION_LOCAL = "Local";

Blockly.Msg.VARIABLES_GETNUMBER_RANDOM = "Random";
Blockly.Msg.VARIABLES_GETNUMBER_RANDOMSEED = "Random Seed";

Blockly.Msg.MATH_RADIAN_TO_DEGREE_TITLE = "Degree";
Blockly.Msg.MATH_RADIAN_TO_DEGREE_APPEND = "to Radian";
Blockly.Msg.MATH_RADIAN_TO_DEGREE_TOOLTIP = "";

Blockly.Msg.LAUNCHSERIAL = "Launch PuTTY serial monitor"
Blockly.Msg.DOWNLOAD = "Download PNG"
Blockly.Msg.PREVIOUSSTEP = "Previous step"
Blockly.Msg.NEXTSTEP = "Next Step"

Blockly.Msg.CATEGORY_CAST = "Cast";
Blockly.Msg.SCROLLPLUGIN = "Switch Edge Scroll";
Blockly.Msg.SCROLLPLUGIN_TRUE = "Enable Edge Scroll";
Blockly.Msg.SCROLLPLUGIN_FALSE = "Disable Edge Scroll";
Blockly.Msg.HIGHLIGHTPLUGIN = "Enable Content High Light";
Blockly.Msg.BACKPACKPLUGIN = 'Enable Backpack Workspace';
Blockly.Msg.DELETENULL = 'Delete %1 Empty Block';
Blockly.Msg.SEARCHNULL = 'Search Next Empty Block';

Blockly.Msg['COPY_ALL_TO_BACKPACK'] = 'Copy All Blocks to Backpack';
Blockly.Msg['COPY_TO_BACKPACK'] = 'Copy to Backpack';
Blockly.Msg['EMPTY_BACKPACK'] = 'Empty';
Blockly.Msg['PASTE_ALL_FROM_BACKPACK'] = 'Paste All Blocks from Backpack';
Blockly.Msg['REMOVE_FROM_BACKPACK'] = 'Remove from Backpack';

Blockly.Msg["CONTROLS_SWITCH"] = "Switch-Case";
Blockly.Msg["CONTROLS_SWITCH_VALUE"] = "Value";
Blockly.Msg["CONTROLS_SWITCH_CASE"] = "Case";
Blockly.Msg["CONTROLS_SWITCH_DEFAULT"] = "Default";
Blockly.Msg["CONTROLS_SWITCH_TO"] = "Execute";
Blockly.Msg["CONTROLS_SWITCH_MSG"] = "Case";
Blockly.Msg["CONTROLS_SWITCH_MSG_CASE"] = "Case";
Blockly.Msg["CONTROLS_SWITCH_MSG_DEFAULT"] = "Default Execute";

Blockly.Msg.TOOLBOX_DISPLAY = "Toolbox Category";
Blockly.Msg.TOOLBOX_SHOW = "Show Toolbox";
Blockly.Msg.TOOLBOX_HIDE = "Hide Toolbox";
Blockly.Msg.LOADLASTBLOCKS = "Import Backup Blocks";
Blockly.Msg.WINDOW_CLOSE_MESSAGE = "Are you sure whether you have saved the file or not?";

Blockly.Msg.VARIABLES_TO_STRING_BIN = "Binary string";
Blockly.Msg.VARIABLES_TO_STRING_OCT = "Octal string";
Blockly.Msg.VARIABLES_TO_STRING_DEC = "Decimal string";
Blockly.Msg.VARIABLES_TO_STRING_HEX = "Hexadecimal string";
Blockly.Msg.VARIABLES_TO_REPLACE = "Replace";

Blockly.Msg.RELOAD_TITLE = "Do you want to restart the APP?";
Blockly.Msg.COM_TITLE = "Please select com port.";
Blockly.Msg.BUTTON_OPEN = "OPEN";
Blockly.Msg.BUTTON_CLOSE = "CLOSE";
Blockly.Msg.BUTTON_CLEAR = "CLEAR"
Blockly.Msg.BUTTON_SURE = "SURE";
Blockly.Msg.BUTTON_RESET = "Are you sure to reset the workspace?";
Blockly.Msg.BUTTON_SERIAL_OPEN = "Open PUTTY";
Blockly.Msg.BUTTON_SERIAL_TITLE = "SERIAL PORT MONITER";
Blockly.Msg.BUTTON_UPLOAD_TITLE = "UPLOAD CODE";
Blockly.Msg.BUTTON_UPLOAD_STATE = "UPLOAD STATE";
Blockly.Msg.BUTTON_UPLOAD_START = "Uploading...";
Blockly.Msg.BUTTON_UPLOAD_CODE = "Reload Code";

Blockly.Msg["VARIABLES_DEFINE"] = "Define";
Blockly.Msg["BUTTON_CUSTOMBLOCKS"] = "Add Custom Blocks";
Blockly.Msg["CUSTOMBLOCKS_TITLE"] = "Please input remote custom blocks url.\nIncluding files: blocks.js, javascript.js, toolbox.xml, en.js, zh-hant.js\n\nAnother way, You can add the url to \\package.nw\\customBlocks\\customblocks.js";
Blockly.Msg["BUTTON_COPYCODE_SUCCESS"] = "Copy to clipboard successful";
Blockly.Msg["BAUDRATE"] = "Buad Rate";
Blockly.Msg["MYBACKPACK_TITLE"] = "BACKPACK";
Blockly.Msg["MSG_TOOLBOX"] = "Toolbox";
Blockly.Msg["MSG_CODE"] = "Arduino Code";
Blockly.Msg["MSG_SERIAL_TOOL"] = "Serial Plotter";
Blockly.Msg["LANG-SELECTOR"] = "Select Language";
Blockly.Msg["BOARD-SELECTOR"] = "Select Board";
Blockly.Msg["COM-SELECTOR"] = "Select COM";
Blockly.Msg["BUTTON_UPLOAD"] = "Upload";
Blockly.Msg["BUTTON_PUTTY"] = "Open serial monitor (PUTTY)";
Blockly.Msg["BUTTON_CODE"] = "Show/Hide Arduino Code";
Blockly.Msg["BUTTON_RESET"] = "Reset workspace";
Blockly.Msg["BUTTON_OPEN_INO"] = "Open the ino file";
Blockly.Msg["BUTTON_OPEN_XML"] = "Import blocks to workspace";
Blockly.Msg["BUTTON_SAVE_INO"] = "Save to ino file";
Blockly.Msg["BUTTON_SAVE_PNG"] = "Save to png file";
Blockly.Msg["BUTTON_TOOLBOX"] = "Show/Hide Toolbox category";
Blockly.Msg["BUTTON_MQTT"] = "Web MQTT";
Blockly.Msg["BUTTON_ADDREMOTEBLOCKS"] = "Import remote custom blocks";
Blockly.Msg["BUTTON_ADDEXTENSIONBLOCKS"] = "Import extension custom blocks";
Blockly.Msg["BUTTON_LANG"] = "English / Chinese";
Blockly.Msg["BUTTON_COPYCODE"] = "Copy to clipboard";
Blockly.Msg["BUTTON_TOOL"] = "Open block developer tool";
Blockly.Msg["BUTTON_WEBSERIAL"] = "Open web serial monitor";
Blockly.Msg["BUTTON_UPLOADCODE"] = "Upload HEX file to nano/uno/pro/pro-mini";
Blockly.Msg["MSG_WEBSERIAL"] = "Web Serial Monitor";
Blockly.Msg["INITIAL_SETUP"] = "setup";
Blockly.Msg["INITIAL_LOOP"] = "loop";
Blockly.Msg["LANGUAGE_EN"] = "EN";
Blockly.Msg["LANGUAGE_CHT"] = "CHT";
Blockly.Msg["BAUDRATE_TITLE"] = "Baud Rate : ";
Blockly.Msg["CLOSEPORT_TITLE"] = "Close port";
Blockly.Msg["REQUESTPORT_TITLE"] = "Select port";
Blockly.Msg["SENDSTRING_TITLE"] = "Send text";
Blockly.Msg["CLEARSTATUS_TITLE"] = "Clear message";
Blockly.Msg["MSG_WEBBLUETOOTH"] = "Web Bluetooth Monitor";
Blockly.Msg["BUTTON_WEBBLUETOOTH"] = "Web Bluetooth Monitor";
Blockly.Msg["BLUETOOTH_DISCONNECT_DEVICE"] = "Disconnect device";
Blockly.Msg["BLUETOOTH_REQUEST_DEVICE"] = "Request device";
Blockly.Msg["BLUETOOTH_SENDSTRING"] = "Send text";
Blockly.Msg["BLUETOOTH_CLEARTEXT"] = "Clear message";
Blockly.Msg["UUID_SERVICE_TITLE"] = "Service UUID";
Blockly.Msg["UUID_TX_TITLE"] = "TX UUID";
Blockly.Msg["UUID_RX_TITLE"] = "RX UUID";

Blockly.Msg["MYPICKPLACEBLOCK_PICKPLACE_ENABLED"] = "Enable pick/place block";
Blockly.Msg["MYPICKPLACEBLOCK_PICKPLACE_DISABLED"] = "Disable pick/place block";
Blockly.Msg["MYPICKPLACEBLOCK_CLICK_TO_PICK"] = "Pick block";
Blockly.Msg["MYPICKPLACEBLOCK_CLICK_TO_PLACE_NEXT"] = "Place block (next)";
Blockly.Msg["MYPICKPLACEBLOCK_CLICK_TO_PLACE_PREVIOUS"] = "Place block (previous)";
Blockly.Msg["MYPICKPLACEBLOCK_CLICK_TO_PLACE_INPUT"] = "Place block [input: #]";
Blockly.Msg["MYPICKPLACEBLOCK_CLICK_TO_PLACE_INPUT_NAME"] = ["","","","","","","","","",""];

Blockly.Msg["DISABLED_TOPCHECK"] = "Disable the check of top blocks";
Blockly.Msg["ENABLED_TOPCHECK"] = "Enable the check of top blocks";

Blockly.Msg["INSERTBLOCKS_WORKSPACE_BLOCK_EXPORT"] = "Export selected block to local file";
Blockly.Msg["INSERTBLOCKS_WORKSPACE_BLOCK_INSERT"] = "Insert a block into workspace from local file";